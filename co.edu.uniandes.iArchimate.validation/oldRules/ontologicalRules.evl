
	
	
	
	
	
	
	
	
	
	
	

context Element {
	
  	critique hasRightElementName {
	   	check{
	   	  var validNames = Collection {'ApplicationCollaboration','ApplicationComponent','ApplicationFunction','ApplicationInteraction','ApplicationInterface','ApplicationService','ArchimateModel','Artifact','BusinessActor','BusinessBehaviorElement','BusinessCollaboration','BusinessEvent','BusinessFunction','BusinessInteraction','BusinessInterface','BusinessObject','BusinessProcess','BusinessRole','BusinessService','CommunicationPath','Contract','DataObject','Device','InfrastructureInterface','InfrastructureService','Location','Meaning','Network','Node','Product','Representation','SystemSoftware','Value'};
	   	  if ( validNames.includes(self.typeName) ) { return true; } else { return false; }
	   	}
	   	message: 'The instance (EClass) \'' + self.typeName + '\' has not a valid name.' 
	   	
	   	fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEClassName(validNames);
				if(newName <> null) self.typeName := newName; 		
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}
	} 		
}

context Attribute {	
	 
	  
	critique hasRightAttributeNameInElement_ApplicationCollaboration{
 		guard: self.element.typeName == 'ApplicationCollaboration'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_ApplicationComponent{
 		guard: self.element.typeName == 'ApplicationComponent'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_ApplicationFunction{
 		guard: self.element.typeName == 'ApplicationFunction'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_ApplicationInteraction{
 		guard: self.element.typeName == 'ApplicationInteraction'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_ApplicationInterface{
 		guard: self.element.typeName == 'ApplicationInterface'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_ApplicationService{
 		guard: self.element.typeName == 'ApplicationService'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_ArchimateModel{
 		guard: self.element.typeName == 'ArchimateModel'
	   	check{
	   		var validNames = Collection {};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   		   			
	}	
  
	critique hasRightAttributeNameInElement_Artifact{
 		guard: self.element.typeName == 'Artifact'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_BusinessActor{
 		guard: self.element.typeName == 'BusinessActor'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_BusinessBehaviorElement{
 		guard: self.element.typeName == 'BusinessBehaviorElement'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_BusinessCollaboration{
 		guard: self.element.typeName == 'BusinessCollaboration'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_BusinessEvent{
 		guard: self.element.typeName == 'BusinessEvent'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_BusinessFunction{
 		guard: self.element.typeName == 'BusinessFunction'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_BusinessInteraction{
 		guard: self.element.typeName == 'BusinessInteraction'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_BusinessInterface{
 		guard: self.element.typeName == 'BusinessInterface'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_BusinessObject{
 		guard: self.element.typeName == 'BusinessObject'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_BusinessProcess{
 		guard: self.element.typeName == 'BusinessProcess'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_BusinessRole{
 		guard: self.element.typeName == 'BusinessRole'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_BusinessService{
 		guard: self.element.typeName == 'BusinessService'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_CommunicationPath{
 		guard: self.element.typeName == 'CommunicationPath'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_Contract{
 		guard: self.element.typeName == 'Contract'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_DataObject{
 		guard: self.element.typeName == 'DataObject'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_Device{
 		guard: self.element.typeName == 'Device'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_InfrastructureInterface{
 		guard: self.element.typeName == 'InfrastructureInterface'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_InfrastructureService{
 		guard: self.element.typeName == 'InfrastructureService'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_Location{
 		guard: self.element.typeName == 'Location'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_Meaning{
 		guard: self.element.typeName == 'Meaning'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_Network{
 		guard: self.element.typeName == 'Network'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_Node{
 		guard: self.element.typeName == 'Node'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_Product{
 		guard: self.element.typeName == 'Product'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_Representation{
 		guard: self.element.typeName == 'Representation'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_SystemSoftware{
 		guard: self.element.typeName == 'SystemSoftware'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
  
	critique hasRightAttributeNameInElement_Value{
 		guard: self.element.typeName == 'Value'
	   	check{
	   		var validNames = Collection {'elementName','description'};
	   		if( validNames.includes(self.name) ) return true; else return false; 
	   	}
	   	message: 'The instance (EAttribute) \'' + self.name + '\' has not a valid name.'
	   	
		fix {		  
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');
			  	var newName := rulesValidationHelper.changeInstanceEAttributeName(validNames);
				if(newName <> null) self.name := newName;
				rulesValidationHelper.reValidate();  			
		   	}	   	
		}	   			
	}	
	
	  
	critique hasRightAttributeTypeInElement_ApplicationCollaboration{
 		guard :  self.satisfies('hasRightAttributeNameInElement_ApplicationCollaboration') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_ApplicationComponent{
 		guard :  self.satisfies('hasRightAttributeNameInElement_ApplicationComponent') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_ApplicationFunction{
 		guard :  self.satisfies('hasRightAttributeNameInElement_ApplicationFunction') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_ApplicationInteraction{
 		guard :  self.satisfies('hasRightAttributeNameInElement_ApplicationInteraction') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_ApplicationInterface{
 		guard :  self.satisfies('hasRightAttributeNameInElement_ApplicationInterface') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_ApplicationService{
 		guard :  self.satisfies('hasRightAttributeNameInElement_ApplicationService') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
    
	critique hasRightAttributeTypeInElement_Artifact{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Artifact') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_BusinessActor{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessActor') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_BusinessBehaviorElement{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessBehaviorElement') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_BusinessCollaboration{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessCollaboration') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_BusinessEvent{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessEvent') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_BusinessFunction{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessFunction') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_BusinessInteraction{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessInteraction') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_BusinessInterface{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessInterface') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_BusinessObject{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessObject') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_BusinessProcess{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessProcess') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_BusinessRole{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessRole') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_BusinessService{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessService') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_CommunicationPath{
 		guard :  self.satisfies('hasRightAttributeNameInElement_CommunicationPath') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_Contract{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Contract') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_DataObject{
 		guard :  self.satisfies('hasRightAttributeNameInElement_DataObject') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_Device{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Device') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_InfrastructureInterface{
 		guard :  self.satisfies('hasRightAttributeNameInElement_InfrastructureInterface') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_InfrastructureService{
 		guard :  self.satisfies('hasRightAttributeNameInElement_InfrastructureService') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_Location{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Location') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_Meaning{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Meaning') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_Network{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Network') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_Node{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Node') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_Product{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Product') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_Representation{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Representation') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_SystemSoftware{
 		guard :  self.satisfies('hasRightAttributeNameInElement_SystemSoftware') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	
  
	critique hasRightAttributeTypeInElement_Value{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Value') 
	   	check{
	   	 	 if(self.name == 'elementName'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			 if(self.name == 'description'){ if(self.type.name == 'EString'){ return true; }else{ return false; }} 
			
	   	}
	   	message{
	   		var m;
	   		 if(self.name == 'elementName'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 if(self.name == 'description'){ m = 'The EType of instance \'' +   self.name +  '\' must be: EString'; }
			 return m;
	   	}

		fix {		  
			title: 'Set the valid type.'
		  	do {
		  		 if(self.name == 'elementName'){ self.type = AttributeTypeValue#EString; } 
				 if(self.name == 'description'){ self.type = AttributeTypeValue#EString; } 
				
		   	}
		}
	}	

	
	constraint multipleAttributeInstancesInClass_ApplicationCollaboration{
 		guard :  self.satisfies('hasRightAttributeNameInElement_ApplicationCollaboration')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_ApplicationComponent{
 		guard :  self.satisfies('hasRightAttributeNameInElement_ApplicationComponent')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_ApplicationFunction{
 		guard :  self.satisfies('hasRightAttributeNameInElement_ApplicationFunction')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_ApplicationInteraction{
 		guard :  self.satisfies('hasRightAttributeNameInElement_ApplicationInteraction')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_ApplicationInterface{
 		guard :  self.satisfies('hasRightAttributeNameInElement_ApplicationInterface')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_ApplicationService{
 		guard :  self.satisfies('hasRightAttributeNameInElement_ApplicationService')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_ArchimateModel{
 		guard :  self.satisfies('hasRightAttributeNameInElement_ArchimateModel')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_Artifact{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Artifact')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_BusinessActor{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessActor')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_BusinessBehaviorElement{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessBehaviorElement')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_BusinessCollaboration{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessCollaboration')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_BusinessEvent{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessEvent')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_BusinessFunction{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessFunction')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_BusinessInteraction{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessInteraction')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_BusinessInterface{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessInterface')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_BusinessObject{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessObject')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_BusinessProcess{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessProcess')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_BusinessRole{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessRole')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_BusinessService{
 		guard :  self.satisfies('hasRightAttributeNameInElement_BusinessService')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_CommunicationPath{
 		guard :  self.satisfies('hasRightAttributeNameInElement_CommunicationPath')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_Contract{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Contract')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_DataObject{
 		guard :  self.satisfies('hasRightAttributeNameInElement_DataObject')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_Device{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Device')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_InfrastructureInterface{
 		guard :  self.satisfies('hasRightAttributeNameInElement_InfrastructureInterface')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_InfrastructureService{
 		guard :  self.satisfies('hasRightAttributeNameInElement_InfrastructureService')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_Location{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Location')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_Meaning{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Meaning')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_Network{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Network')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_Node{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Node')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_Product{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Product')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_Representation{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Representation')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_SystemSoftware{
 		guard :  self.satisfies('hasRightAttributeNameInElement_SystemSoftware')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	constraint multipleAttributeInstancesInClass_Value{
 		guard :  self.satisfies('hasRightAttributeNameInElement_Value')
	   	check{ if(Element.AllInstances.select (e | e == self.element).first.attributes.select( a | a.name == self.name).size() <> 1 ){ return false; }else{ return true;} }
	   	message : 'The attribute \'' + self.name + '\' can not have more than one instance.' 
	}	

	
}

context ContainmentRelation {
	 
	constraint reverseContainmentRelationInstance{
		check{  
			var cant = ContainmentRelation.allInstances.select( e  | e.source == self.target and e.target == self.source).size;
			if(cant > 0 ){return false;} else {return true;}
		}
		message: 'The instances (EClass) \'' + self.target.typeName + '\' and \'' + self.source.typeName + '\' can not have a reverse containment.'
	}
	  	
	
	     
	critique hasRightContainmentRelationNameSinceElement_ApplicationCollaboration{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ApplicationCollaboration')
	   	check{  
	   		if( (Collection {'composedOfApplicationComponentApplicationComponent','composedOfApplicationInterfaceApplicationComponent','composedOfApplicationCollaborationApplicationCollaboration'}).includes(self.name) ){
	   		    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfApplicationComponentApplicationComponent'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfApplicationInterfaceApplicationComponent'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'ApplicationCollaboration'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfApplicationCollaborationApplicationCollaboration'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesApplicationComponentApplicationComponent','aggregatesApplicationComponentApplicationComponent','aggregatedByApplicationComponentApplicationComponent','aggregatedByApplicationCollaborationApplicationComponent','assignedToApplicationFunctionApplicationComponent','usesApplicationInterfaceApplicationComponent','realizedByArtifactApplicationComponent','usesInfrastructureInterfaceApplicationComponent','usesInfrastructureServiceApplicationComponent','assignedToBusinessBehaviorElementApplicationComponent','assignedFromLocationApplicationComponent','composesApplicationCollaborationApplicationCollaboration','aggregatesApplicationCollaborationApplicationCollaboration','aggregatedByApplicationCollaborationApplicationCollaboration','aggregatesApplicationComponentApplicationCollaboration'});
				       
				if((Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfApplicationComponentApplicationComponent'}) ); }			
       
				if((Collection {'ApplicationInterface'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfApplicationInterfaceApplicationComponent'}) ); }			
       
				if((Collection {'ApplicationCollaboration'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfApplicationCollaborationApplicationCollaboration'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	         

	     
	critique hasRightContainmentRelationNameSinceElement_ApplicationComponent{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ApplicationComponent')
	   	check{  
	   		if( (Collection {'composedOfApplicationComponentApplicationComponent','composedOfApplicationInterfaceApplicationComponent'}).includes(self.name) ){
	   		    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfApplicationComponentApplicationComponent'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfApplicationInterfaceApplicationComponent'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesApplicationComponentApplicationComponent','aggregatesApplicationComponentApplicationComponent','aggregatedByApplicationComponentApplicationComponent','aggregatedByApplicationCollaborationApplicationComponent','assignedToApplicationFunctionApplicationComponent','usesApplicationInterfaceApplicationComponent','realizedByArtifactApplicationComponent','usesInfrastructureInterfaceApplicationComponent','usesInfrastructureServiceApplicationComponent','assignedToBusinessBehaviorElementApplicationComponent','assignedFromLocationApplicationComponent'});
				       
				if((Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfApplicationComponentApplicationComponent'}) ); }			
       
				if((Collection {'ApplicationInterface'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfApplicationInterfaceApplicationComponent'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	      

	     
	critique hasRightContainmentRelationNameSinceElement_ApplicationFunction{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ApplicationFunction')
	   	check{  
	   		if( (Collection {'composedOfApplicationFunctionApplicationFunction'}).includes(self.name) ){
	   		    			
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfApplicationFunctionApplicationFunction'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesApplicationFunctionApplicationFunction','aggregatesApplicationFunctionApplicationFunction','aggregatedByApplicationFunctionApplicationFunction','triggeredByApplicationFunctionApplicationFunction','triggersToApplicationFunctionApplicationFunction','flowsToApplicationFunctionApplicationFunction','flowsFromApplicationFunctionApplicationFunction','realizesApplicationServiceApplicationFunction','assignedToApplicationComponentApplicationFunction','usesApplicationServiceApplicationFunction','accessesDataObjectApplicationFunction','usesInfrastructureServiceApplicationFunction'});
				       
				if((Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfApplicationFunctionApplicationFunction'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_ApplicationInteraction{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ApplicationInteraction')
	   	check{  
	   		if( (Collection {'composedOfApplicationFunctionApplicationFunction','composedOfApplicationInteractionApplicationInteraction'}).includes(self.name) ){
	   		    			
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfApplicationFunctionApplicationFunction'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'ApplicationInteraction'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfApplicationInteractionApplicationInteraction'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesApplicationFunctionApplicationFunction','aggregatesApplicationFunctionApplicationFunction','aggregatedByApplicationFunctionApplicationFunction','triggeredByApplicationFunctionApplicationFunction','triggersToApplicationFunctionApplicationFunction','flowsToApplicationFunctionApplicationFunction','flowsFromApplicationFunctionApplicationFunction','realizesApplicationServiceApplicationFunction','assignedToApplicationComponentApplicationFunction','usesApplicationServiceApplicationFunction','accessesDataObjectApplicationFunction','usesInfrastructureServiceApplicationFunction','composesApplicationInteractionApplicationInteraction','aggregatesApplicationInteractionApplicationInteraction','aggregatedByApplicationInteractionApplicationInteraction'});
				       
				if((Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfApplicationFunctionApplicationFunction'}) ); }			
       
				if((Collection {'ApplicationInteraction'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfApplicationInteractionApplicationInteraction'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	      

	     
	critique hasRightContainmentRelationNameSinceElement_ApplicationInterface{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ApplicationInterface')
	   	check{  
	   		if( (Collection {'composedOfApplicationInterfaceApplicationInterface'}).includes(self.name) ){
	   		    			
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfApplicationInterfaceApplicationInterface'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesApplicationInterfaceApplicationInterface','aggregatesApplicationInterfaceApplicationInterface','aggregatedByApplicationInterfaceApplicationInterface','composesApplicationComponentApplicationInterface','usedByApplicationComponentApplicationInterface','assignedToApplicationServiceApplicationInterface','usedByBusinessActorApplicationInterface','usedByBusinessRoleApplicationInterface','assignedToBusinessServiceApplicationInterface'});
				       
				if((Collection {'ApplicationInterface'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfApplicationInterfaceApplicationInterface'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_ApplicationService{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ApplicationService')
	   	check{  
	   		if( (Collection {'composedOfApplicationServiceApplicationService'}).includes(self.name) ){
	   		    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfApplicationServiceApplicationService'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesApplicationServiceApplicationService','aggregatesApplicationServiceApplicationService','aggregatedByApplicationServiceApplicationService','realizedByApplicationFunctionApplicationService','usedByApplicationFunctionApplicationService','assignedToApplicationInterfaceApplicationService','accessesDataObjectApplicationService','aggregatedByProductApplicationService','usedByBusinessBehaviorElementApplicationService','usedByBusinessActorApplicationService','usedByBusinessRoleApplicationService'});
				       
				if((Collection {'ApplicationService'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfApplicationServiceApplicationService'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_ArchimateModel{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ArchimateModel')
	   	check{  
	   		if( (Collection {'elements','elementsA','elementsI'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessBehaviorElement','BusinessEvent','BusinessFunction','BusinessInteraction','BusinessObject','BusinessProcess','BusinessService','Contract','Location','Meaning','Product','Representation','Value'}).includes(self.target.typeName) ){
					if( (Collection {'elements'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'Artifact','CommunicationPath','Device','Network','Node','SystemSoftware'}).includes(self.target.typeName) ){
					if( (Collection {'elementsA'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent','ApplicationFunction','ApplicationInteraction','ApplicationInterface','ApplicationService','BusinessActor','BusinessCollaboration','BusinessInterface','BusinessRole','DataObject','InfrastructureInterface','InfrastructureService'}).includes(self.target.typeName) ){
					if( (Collection {'elementsI'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {});
				       
				if((Collection {'BusinessBehaviorElement','BusinessEvent','BusinessFunction','BusinessInteraction','BusinessObject','BusinessProcess','BusinessService','Contract','Location','Meaning','Product','Representation','Value'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'elements'}) ); }			
       
				if((Collection {'Artifact','CommunicationPath','Device','Network','Node','SystemSoftware'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'elementsA'}) ); }			
       
				if((Collection {'ApplicationCollaboration','ApplicationComponent','ApplicationFunction','ApplicationInteraction','ApplicationInterface','ApplicationService','BusinessActor','BusinessCollaboration','BusinessInterface','BusinessRole','DataObject','InfrastructureInterface','InfrastructureService'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'elementsI'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	         

	     
	critique hasRightContainmentRelationNameSinceElement_Artifact{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Artifact')
	   	check{  
	   		if( (Collection {'composedOfArtifactArtifact'}).includes(self.name) ){
	   		    			
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfArtifactArtifact'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesArtifactArtifact','aggregatesArtifactArtifact','aggregatedByArtifactArtifact','accessedByInfrastructureServiceArtifact','assignedToNodeArtifact','assignedFromLocationArtifact','realizesDataObjectArtifact','realizesApplicationComponentArtifact'});
				       
				if((Collection {'Artifact'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfArtifactArtifact'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_BusinessActor{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessActor')
	   	check{  
	   		if( (Collection {'composedOfBusinessActorBusinessActor'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessActorBusinessActor'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesBusinessActorBusinessActor','aggregatesBusinessActorBusinessActor','aggregatedByBusinessActorBusinessActor','aggregatesByBusinessCollaborationBusinessActor','usesBusinessInterfaceBusinessActor','assignedToBusinessRoleBusinessActor','usesElementBusinessServiceBusinessActor','assignedToLocationBusinessActor','usesApplicationServiceBusinessActor','usesApplicationInterfaceBusinessActor'});
				       
				if((Collection {'BusinessActor'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessActorBusinessActor'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_BusinessBehaviorElement{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessBehaviorElement')
	   	check{  
	   		if( (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement','realisesBusinessServiceBusinessBehaviorElement','triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement','accessesBusinessObjectBusinessBehaviorElement','assignedToBusinessRoleBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement','usesApplicationServiceBusinessBehaviorElement','assignedFromApplicationComponentBusinessBehaviorElement'});
				       
				if((Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_BusinessCollaboration{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessCollaboration')
	   	check{  
	   		if( (Collection {'composedOfBusinessRoleBusinessRole','composedOfBusinessInterfaceBusinessRole'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessRoleBusinessRole'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'BusinessInterface'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessInterfaceBusinessRole'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesBusinessRoleBusinessRole','aggregatesBusinessRoleBusinessRole','aggregatedByBusinessRoleBusinessRole','aggregatedByBusinessCollaborationBusinessRole','assignedToBusinessActorBusinessRole','assignedToBusinessBehaviorElementBusinessRole','usesBusinessInterfaceBusinessRole','usesElementBusinessServiceBusinessRole','usesApplicationServiceBusinessRole','usesApplicationInterfaceBusinessRole','aggregatesBusinessActorBusinessCollaboration','aggregatesBusinessRoleBusinessCollaboration'});
				       
				if((Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessRoleBusinessRole'}) ); }			
       
				if((Collection {'BusinessInterface'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessInterfaceBusinessRole'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	      

	     
	critique hasRightContainmentRelationNameSinceElement_BusinessEvent{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessEvent')
	   	check{  
	   		if( (Collection {'composedOfBusinessEventBusinessEvent'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessEventBusinessEvent'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesBusinessEventBusinessEvent','aggregatesBusinessEventBusinessEvent','aggregatedByBusinessEventBusinessEvent','triggersByBusinessBehaviorElementBusinessEvent','triggersBusinessBehaviorElementBusinessEvent','accessedByBusinessObjectBusinessEvent'});
				       
				if((Collection {'BusinessEvent'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessEventBusinessEvent'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_BusinessFunction{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessFunction')
	   	check{  
	   		if( (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement','realisesBusinessServiceBusinessBehaviorElement','triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement','accessesBusinessObjectBusinessBehaviorElement','assignedToBusinessRoleBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement','usesApplicationServiceBusinessBehaviorElement','assignedFromApplicationComponentBusinessBehaviorElement'});
				       
				if((Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_BusinessInteraction{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessInteraction')
	   	check{  
	   		if( (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement','realisesBusinessServiceBusinessBehaviorElement','triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement','accessesBusinessObjectBusinessBehaviorElement','assignedToBusinessRoleBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement','usesApplicationServiceBusinessBehaviorElement','assignedFromApplicationComponentBusinessBehaviorElement'});
				       
				if((Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_BusinessInterface{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessInterface')
	   	check{  
	   		if( (Collection {'composedOfBusinessInterfaceBusinessInterface'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessInterface'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessInterfaceBusinessInterface'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesBusinessInterfaceBusinessInterface','aggregatesBusinessInterfaceBusinessInterface','aggregatedByBusinessInterfaceBusinessInterface','composesBusinessRoleBusinessInterface','usedByBusinessActorBusinessInterface','usedByBusinessRoleBusinessInterface','assignedToBusinessServiceBusinessInterface'});
				       
				if((Collection {'BusinessInterface'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessInterfaceBusinessInterface'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_BusinessObject{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessObject')
	   	check{  
	   		if( (Collection {'composedOfBusinessObjectBusinessObject'}).includes(self.name) ){
	   		    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessObjectBusinessObject'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesBusinessObjectBusinessObject','aggregatesBusinessObjectBusinessObject','aggregatedByBusinessObjectBusinessObject','associatedWithMeaningBusinessObject','realizedByRepresentationBusinessObject','accessedByBusinessBehaviorElementBusinessObject','accessesBusinessEventBusinessObject','accessedByBusinessServiceBusinessObject','assignedToLocationBusinessObject','realizedByDataObjectBusinessObject'});
				       
				if((Collection {'Contract','BusinessObject'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessObjectBusinessObject'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_BusinessProcess{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessProcess')
	   	check{  
	   		if( (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement','realisesBusinessServiceBusinessBehaviorElement','triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement','accessesBusinessObjectBusinessBehaviorElement','assignedToBusinessRoleBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement','usesApplicationServiceBusinessBehaviorElement','assignedFromApplicationComponentBusinessBehaviorElement'});
				       
				if((Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_BusinessRole{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessRole')
	   	check{  
	   		if( (Collection {'composedOfBusinessRoleBusinessRole','composedOfBusinessInterfaceBusinessRole'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessRoleBusinessRole'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'BusinessInterface'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessInterfaceBusinessRole'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesBusinessRoleBusinessRole','aggregatesBusinessRoleBusinessRole','aggregatedByBusinessRoleBusinessRole','aggregatedByBusinessCollaborationBusinessRole','assignedToBusinessActorBusinessRole','assignedToBusinessBehaviorElementBusinessRole','usesBusinessInterfaceBusinessRole','usesElementBusinessServiceBusinessRole','usesApplicationServiceBusinessRole','usesApplicationInterfaceBusinessRole'});
				       
				if((Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessRoleBusinessRole'}) ); }			
       
				if((Collection {'BusinessInterface'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessInterfaceBusinessRole'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	      

	     
	critique hasRightContainmentRelationNameSinceElement_BusinessService{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessService')
	   	check{  
	   		if( (Collection {'composedOfBusinessServiceBusinessService'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessServiceBusinessService'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesBusinessServiceBusinessService','aggregatesBusinessServiceBusinessService','aggregatedByBusinessServiceBusinessService','aggregatedByProductBusinessService','usedByBusinessActorBusinessService','realizedByBusinessBehaviorElementBusinessService','usedByBusinessBehaviorElementBusinessService','assignedToBusinessInterfaceBusinessService','accessesBusinessObjectBusinessService','usedByElementBusinessRoleBusinessService','assignedFromApplicationInterfaceBusinessService'});
				       
				if((Collection {'BusinessService'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessServiceBusinessService'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_CommunicationPath{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'CommunicationPath')
	   	check{  
	   		if( (Collection {'composedOfCommunicationPathCommunicationPath'}).includes(self.name) ){
	   		    			
				if( (Collection {'CommunicationPath'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfCommunicationPathCommunicationPath'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesCommunicationPathCommunicationPath','aggregatesCommunicationPathCommunicationPath','aggregatedByCommunicationPathCommunicationPath','associatedWithNodeCommunicationPath','realizedByNetworkCommunicationPath','assignedFromLocationCommunicationPath'});
				       
				if((Collection {'CommunicationPath'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfCommunicationPathCommunicationPath'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_Contract{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Contract')
	   	check{  
	   		if( (Collection {'composedOfBusinessObjectBusinessObject','composedOfContractContract'}).includes(self.name) ){
	   		    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfBusinessObjectBusinessObject'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'Contract'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfContractContract'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesBusinessObjectBusinessObject','aggregatesBusinessObjectBusinessObject','aggregatedByBusinessObjectBusinessObject','associatedWithMeaningBusinessObject','realizedByRepresentationBusinessObject','accessedByBusinessBehaviorElementBusinessObject','accessesBusinessEventBusinessObject','accessedByBusinessServiceBusinessObject','assignedToLocationBusinessObject','realizedByDataObjectBusinessObject','composesContractContract','aggregatesContractContract','aggregatedByContractContract','aggregatedByProductContract'});
				       
				if((Collection {'Contract','BusinessObject'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfBusinessObjectBusinessObject'}) ); }			
       
				if((Collection {'Contract'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfContractContract'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	      

	     
	critique hasRightContainmentRelationNameSinceElement_DataObject{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'DataObject')
	   	check{  
	   		if( (Collection {'composedOfDataObjectDataObject'}).includes(self.name) ){
	   		    			
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfDataObjectDataObject'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesDataObjectDataObject','aggregatesDataObjectDataObject','aggregatedByDataObjectDataObject','accessedByApplicationFunctionDataObject','accessedByApplicationServiceDataObject','realizedByArtifactDataObject','realizesBusinessObjectDataObject','assignedFromLocationDataObject'});
				       
				if((Collection {'DataObject'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfDataObjectDataObject'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_Device{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Device')
	   	check{  
	   		if( (Collection {'composedOfNodeNode','composedOfInfrastructureInterfaceNode','composedOfDeviceDevice'}).includes(self.name) ){
	   		    			
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfNodeNode'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfInfrastructureInterfaceNode'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'Device'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfDeviceDevice'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesNodeNode','aggregatesNodeNode','aggregatedByNodeNode','associatedWithCommunicationPathNode','assignedToArtifactNode','usesInfrastructureInterfaceNode','usesInfrastructureServiceNode','assignedFromLocationNode','composesDeviceDevice','aggregatesDeviceDevice','aggregatedByDeviceDevice','associatedWithNetworkDevice','assignedToSystemSoftwareDevice'});
				       
				if((Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfNodeNode'}) ); }			
       
				if((Collection {'InfrastructureInterface'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfInfrastructureInterfaceNode'}) ); }			
       
				if((Collection {'Device'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfDeviceDevice'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	         

	     
	critique hasRightContainmentRelationNameSinceElement_InfrastructureInterface{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'InfrastructureInterface')
	   	check{  
	   		if( (Collection {'composedOfInfrastructureInterfaceInfrastructureInterface'}).includes(self.name) ){
	   		    			
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfInfrastructureInterfaceInfrastructureInterface'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesInfrastructureInterfaceInfrastructureInterface','aggregatesInfrastructureInterfaceInfrastructureInterface','aggregatedByInfrastructureInterfaceInfrastructureInterface','composesNodeInfrastructureInterface','assignedToInfrastructureServiceInfrastructureInterface','usedByNodeInfrastructureInterface','usesByApplicationComponentInfrastructureInterface'});
				       
				if((Collection {'InfrastructureInterface'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfInfrastructureInterfaceInfrastructureInterface'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_InfrastructureService{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'InfrastructureService')
	   	check{  
	   		if( (Collection {'composedOfInfrastructureServiceInfrastructureService'}).includes(self.name) ){
	   		    			
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfInfrastructureServiceInfrastructureService'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesInfrastructureServiceInfrastructureService','aggregatesInfrastructureServiceInfrastructureService','aggregatedByInfrastructureServiceInfrastructureService','accessesArtifactInfrastructureService','assignedToInfrastructureInterfaceInfrastructureService','realizedByNodeInfrastructureService','aggregatedByProductInfrastructureService','usesByApplicationComponentInfrastructureService','usesByApplicationFunctionInfrastructureService'});
				       
				if((Collection {'InfrastructureService'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfInfrastructureServiceInfrastructureService'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_Location{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Location')
	   	check{  
	   		if( (Collection {'composedOfLocationLocation'}).includes(self.name) ){
	   		    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfLocationLocation'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesLocationLocation','aggregatesLocationLocation','aggregatedByLocationLocation','assignedFromBusinessActorLocation','assignedFromBusinessObjectLocation','assignedFromRepresentationLocation','assignedToDataObjectLocation','assignedToApplicationComponentLocation','assignedToNodeLocation','assignedToNetworkLocation','assignedToCommunicationPathLocation','assignedToArtifactLocation'});
				       
				if((Collection {'Location'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfLocationLocation'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_Meaning{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Meaning')
	   	check{  
	   		if( (Collection {'composedOfMeaningMeaning'}).includes(self.name) ){
	   		    			
				if( (Collection {'Meaning'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfMeaningMeaning'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesMeaningMeaning','aggregatesMeaningMeaning','aggregatedByMeaningMeaning','associatedWithBusinessObjectMeaning'});
				       
				if((Collection {'Meaning'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfMeaningMeaning'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_Network{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Network')
	   	check{  
	   		if( (Collection {'composedOfNetworkNetwork'}).includes(self.name) ){
	   		    			
				if( (Collection {'Network'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfNetworkNetwork'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesNetworkNetwork','aggregatesNetworkNetwork','aggregatedByNetworkNetwork','realizesCommunicationPathNetwork','associatedWithDeviceNetwork','assignedFromLocationNetwork'});
				       
				if((Collection {'Network'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfNetworkNetwork'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_Node{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Node')
	   	check{  
	   		if( (Collection {'composedOfNodeNode','composedOfInfrastructureInterfaceNode'}).includes(self.name) ){
	   		    			
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfNodeNode'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfInfrastructureInterfaceNode'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesNodeNode','aggregatesNodeNode','aggregatedByNodeNode','associatedWithCommunicationPathNode','assignedToArtifactNode','usesInfrastructureInterfaceNode','usesInfrastructureServiceNode','assignedFromLocationNode'});
				       
				if((Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfNodeNode'}) ); }			
       
				if((Collection {'InfrastructureInterface'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfInfrastructureInterfaceNode'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	      

	     
	critique hasRightContainmentRelationNameSinceElement_Product{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Product')
	   	check{  
	   		if( (Collection {'composedOfProductProduct'}).includes(self.name) ){
	   		    			
				if( (Collection {'Product'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfProductProduct'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesProductProduct','aggregatesProductProduct','aggregatedByProductProduct','associatedWithValueProduct','aggregatesContractProduct','aggregatesBusinessServiceProduct','aggregatesInfrastructureServiceProduct','aggregatesApplicationServiceProduct'});
				       
				if((Collection {'Product'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfProductProduct'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_Representation{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Representation')
	   	check{  
	   		if( (Collection {'composedOfRepresentationRepresentation'}).includes(self.name) ){
	   		    			
				if( (Collection {'Representation'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfRepresentationRepresentation'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesRepresentationRepresentation','aggregatesRepresentationRepresentation','aggregatedByRepresentationRepresentation','realizesBusinessObjectRepresentation','assignedToLocationRepresentation'});
				       
				if((Collection {'Representation'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfRepresentationRepresentation'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   

	     
	critique hasRightContainmentRelationNameSinceElement_SystemSoftware{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'SystemSoftware')
	   	check{  
	   		if( (Collection {'composedOfNodeNode','composedOfInfrastructureInterfaceNode','composedOfSystemSoftwareSystemSoftware'}).includes(self.name) ){
	   		    			
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfNodeNode'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfInfrastructureInterfaceNode'}).includes(self.name)  ){ return true;}
				}
    			
				if( (Collection {'SystemSoftware'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfSystemSoftwareSystemSoftware'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesNodeNode','aggregatesNodeNode','aggregatedByNodeNode','associatedWithCommunicationPathNode','assignedToArtifactNode','usesInfrastructureInterfaceNode','usesInfrastructureServiceNode','assignedFromLocationNode','composesSystemSoftwareSystemSoftware','aggregatesSystemSoftwareSystemSoftware','aggregatedBySystemSoftwareSystemSoftware','assignedToDeviceSystemSoftware'});
				       
				if((Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfNodeNode'}) ); }			
       
				if((Collection {'InfrastructureInterface'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfInfrastructureInterfaceNode'}) ); }			
       
				if((Collection {'SystemSoftware'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfSystemSoftwareSystemSoftware'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	         

	     
	critique hasRightContainmentRelationNameSinceElement_Value{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Value')
	   	check{  
	   		if( (Collection {'composedOfValueValue'}).includes(self.name) ){
	   		    			
				if( (Collection {'Value'}).includes(self.target.typeName) ){
					if( (Collection {'composedOfValueValue'}).includes(self.name)  ){ return true;}
				}

				return false;
	   		 
			}else{ return false; }
		}	
	   	message: 'The instance (Containment EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_NoCont = (Collection {'composesValueValue','aggregatesValueValue','aggregatedByValueValue','associatedWithProductValue'});
				       
				if((Collection {'Value'}).includes(self.target.typeName)){ namesGroup.addAll( (Collection {'composedOfValueValue'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceContEReferenceName(namesGroup, namesERefencences_NoCont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	   
	
	
}

context CrossRelation{
	 
	      
	critique hasRightCrossRelationNameSinceElement_ApplicationCollaboration{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ApplicationCollaboration')
	   	check{  
	   		if( (Collection {'composesApplicationComponentApplicationComponent','aggregatesApplicationComponentApplicationComponent','aggregatedByApplicationComponentApplicationComponent','aggregatedByApplicationCollaborationApplicationComponent','assignedToApplicationFunctionApplicationComponent','usesApplicationInterfaceApplicationComponent','realizedByArtifactApplicationComponent','usesInfrastructureInterfaceApplicationComponent','usesInfrastructureServiceApplicationComponent','assignedToBusinessBehaviorElementApplicationComponent','assignedFromLocationApplicationComponent','composesApplicationCollaborationApplicationCollaboration','aggregatesApplicationCollaborationApplicationCollaboration','aggregatedByApplicationCollaborationApplicationCollaboration','aggregatesApplicationComponentApplicationCollaboration'}).includes(self.name) ){
	   		    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'composesApplicationComponentApplicationComponent','aggregatesApplicationComponentApplicationComponent','aggregatedByApplicationComponentApplicationComponent','aggregatesApplicationComponentApplicationCollaboration'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationCollaboration'}).includes(self.target.typeName) ){
					if( (Collection {'aggregatedByApplicationCollaborationApplicationComponent','composesApplicationCollaborationApplicationCollaboration','aggregatesApplicationCollaborationApplicationCollaboration','aggregatedByApplicationCollaborationApplicationCollaboration'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToApplicationFunctionApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){
					if( (Collection {'usesApplicationInterfaceApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){
					if( (Collection {'realizedByArtifactApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){
					if( (Collection {'usesInfrastructureInterfaceApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){
					if( (Collection {'usesInfrastructureServiceApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessBehaviorElementApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromLocationApplicationComponent'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfApplicationComponentApplicationComponent','composedOfApplicationInterfaceApplicationComponent','composedOfApplicationCollaborationApplicationCollaboration'});
				     
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesApplicationComponentApplicationComponent','aggregatesApplicationComponentApplicationComponent','aggregatedByApplicationComponentApplicationComponent','aggregatesApplicationComponentApplicationCollaboration'}) ); }			
     
				if( (Collection {'ApplicationCollaboration'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'aggregatedByApplicationCollaborationApplicationComponent','composesApplicationCollaborationApplicationCollaboration','aggregatesApplicationCollaborationApplicationCollaboration','aggregatedByApplicationCollaborationApplicationCollaboration'}) ); }			
     
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToApplicationFunctionApplicationComponent'}) ); }			
     
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesApplicationInterfaceApplicationComponent'}) ); }			
     
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizedByArtifactApplicationComponent'}) ); }			
     
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesInfrastructureInterfaceApplicationComponent'}) ); }			
     
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesInfrastructureServiceApplicationComponent'}) ); }			
     
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessBehaviorElementApplicationComponent'}) ); }			
     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromLocationApplicationComponent'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesApplicationComponentApplicationComponent_SinceElement_ApplicationCollaboration{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationCollaboration') and	(self.name == 'composesApplicationComponentApplicationComponent')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesApplicationComponentApplicationComponent' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByApplicationComponentApplicationComponent_SinceElement_ApplicationCollaboration{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationCollaboration') and	(self.name == 'aggregatedByApplicationComponentApplicationComponent')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByApplicationComponentApplicationComponent' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_aggregatedByApplicationCollaborationApplicationComponent_SinceElement_ApplicationCollaboration{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationCollaboration') and	(self.name == 'aggregatedByApplicationCollaborationApplicationComponent')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByApplicationCollaborationApplicationComponent' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                   
	critique hasTargetInstancesToCrossRelation_assignedToBusinessBehaviorElementApplicationComponent_SinceElement_ApplicationCollaboration{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationCollaboration') and	(self.name == 'assignedToBusinessBehaviorElementApplicationComponent')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'assignedToBusinessBehaviorElementApplicationComponent' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_assignedFromLocationApplicationComponent_SinceElement_ApplicationCollaboration{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationCollaboration') and	(self.name == 'assignedFromLocationApplicationComponent')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'assignedFromLocationApplicationComponent' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_composesApplicationCollaborationApplicationCollaboration_SinceElement_ApplicationCollaboration{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationCollaboration') and	(self.name == 'composesApplicationCollaborationApplicationCollaboration')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesApplicationCollaborationApplicationCollaboration' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByApplicationCollaborationApplicationCollaboration_SinceElement_ApplicationCollaboration{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationCollaboration') and	(self.name == 'aggregatedByApplicationCollaborationApplicationCollaboration')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByApplicationCollaborationApplicationCollaboration' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
   
      
	critique hasRightCrossRelationNameSinceElement_ApplicationComponent{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ApplicationComponent')
	   	check{  
	   		if( (Collection {'composesApplicationComponentApplicationComponent','aggregatesApplicationComponentApplicationComponent','aggregatedByApplicationComponentApplicationComponent','aggregatedByApplicationCollaborationApplicationComponent','assignedToApplicationFunctionApplicationComponent','usesApplicationInterfaceApplicationComponent','realizedByArtifactApplicationComponent','usesInfrastructureInterfaceApplicationComponent','usesInfrastructureServiceApplicationComponent','assignedToBusinessBehaviorElementApplicationComponent','assignedFromLocationApplicationComponent'}).includes(self.name) ){
	   		    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'composesApplicationComponentApplicationComponent','aggregatesApplicationComponentApplicationComponent','aggregatedByApplicationComponentApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationCollaboration'}).includes(self.target.typeName) ){
					if( (Collection {'aggregatedByApplicationCollaborationApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToApplicationFunctionApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){
					if( (Collection {'usesApplicationInterfaceApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){
					if( (Collection {'realizedByArtifactApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){
					if( (Collection {'usesInfrastructureInterfaceApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){
					if( (Collection {'usesInfrastructureServiceApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessBehaviorElementApplicationComponent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromLocationApplicationComponent'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfApplicationComponentApplicationComponent','composedOfApplicationInterfaceApplicationComponent'});
				     
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesApplicationComponentApplicationComponent','aggregatesApplicationComponentApplicationComponent','aggregatedByApplicationComponentApplicationComponent'}) ); }			
     
				if( (Collection {'ApplicationCollaboration'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'aggregatedByApplicationCollaborationApplicationComponent'}) ); }			
     
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToApplicationFunctionApplicationComponent'}) ); }			
     
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesApplicationInterfaceApplicationComponent'}) ); }			
     
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizedByArtifactApplicationComponent'}) ); }			
     
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesInfrastructureInterfaceApplicationComponent'}) ); }			
     
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesInfrastructureServiceApplicationComponent'}) ); }			
     
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessBehaviorElementApplicationComponent'}) ); }			
     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromLocationApplicationComponent'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesApplicationComponentApplicationComponent_SinceElement_ApplicationComponent{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationComponent') and	(self.name == 'composesApplicationComponentApplicationComponent')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesApplicationComponentApplicationComponent' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByApplicationComponentApplicationComponent_SinceElement_ApplicationComponent{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationComponent') and	(self.name == 'aggregatedByApplicationComponentApplicationComponent')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByApplicationComponentApplicationComponent' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_aggregatedByApplicationCollaborationApplicationComponent_SinceElement_ApplicationComponent{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationComponent') and	(self.name == 'aggregatedByApplicationCollaborationApplicationComponent')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByApplicationCollaborationApplicationComponent' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                   
	critique hasTargetInstancesToCrossRelation_assignedToBusinessBehaviorElementApplicationComponent_SinceElement_ApplicationComponent{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationComponent') and	(self.name == 'assignedToBusinessBehaviorElementApplicationComponent')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'assignedToBusinessBehaviorElementApplicationComponent' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_assignedFromLocationApplicationComponent_SinceElement_ApplicationComponent{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationComponent') and	(self.name == 'assignedFromLocationApplicationComponent')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'assignedFromLocationApplicationComponent' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	

      
	critique hasRightCrossRelationNameSinceElement_ApplicationFunction{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ApplicationFunction')
	   	check{  
	   		if( (Collection {'composesApplicationFunctionApplicationFunction','aggregatesApplicationFunctionApplicationFunction','aggregatedByApplicationFunctionApplicationFunction','triggeredByApplicationFunctionApplicationFunction','triggersToApplicationFunctionApplicationFunction','flowsToApplicationFunctionApplicationFunction','flowsFromApplicationFunctionApplicationFunction','realizesApplicationServiceApplicationFunction','assignedToApplicationComponentApplicationFunction','usesApplicationServiceApplicationFunction','accessesDataObjectApplicationFunction','usesInfrastructureServiceApplicationFunction'}).includes(self.name) ){
	   		    			
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){
					if( (Collection {'composesApplicationFunctionApplicationFunction','aggregatesApplicationFunctionApplicationFunction','aggregatedByApplicationFunctionApplicationFunction','triggeredByApplicationFunctionApplicationFunction','triggersToApplicationFunctionApplicationFunction','flowsToApplicationFunctionApplicationFunction','flowsFromApplicationFunctionApplicationFunction'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'realizesApplicationServiceApplicationFunction','usesApplicationServiceApplicationFunction'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToApplicationComponentApplicationFunction'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){
					if( (Collection {'accessesDataObjectApplicationFunction'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){
					if( (Collection {'usesInfrastructureServiceApplicationFunction'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfApplicationFunctionApplicationFunction'});
				     
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesApplicationFunctionApplicationFunction','aggregatesApplicationFunctionApplicationFunction','aggregatedByApplicationFunctionApplicationFunction','triggeredByApplicationFunctionApplicationFunction','triggersToApplicationFunctionApplicationFunction','flowsToApplicationFunctionApplicationFunction','flowsFromApplicationFunctionApplicationFunction'}) ); }			
     
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizesApplicationServiceApplicationFunction','usesApplicationServiceApplicationFunction'}) ); }			
     
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToApplicationComponentApplicationFunction'}) ); }			
     
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessesDataObjectApplicationFunction'}) ); }			
     
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesInfrastructureServiceApplicationFunction'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesApplicationFunctionApplicationFunction_SinceElement_ApplicationFunction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationFunction') and	(self.name == 'composesApplicationFunctionApplicationFunction')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesApplicationFunctionApplicationFunction' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByApplicationFunctionApplicationFunction_SinceElement_ApplicationFunction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationFunction') and	(self.name == 'aggregatedByApplicationFunctionApplicationFunction')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByApplicationFunctionApplicationFunction' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                
	critique hasTargetInstancesToCrossRelation_realizesApplicationServiceApplicationFunction_SinceElement_ApplicationFunction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationFunction') and	(self.name == 'realizesApplicationServiceApplicationFunction')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'realizesApplicationServiceApplicationFunction' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
            
      
	critique hasRightCrossRelationNameSinceElement_ApplicationInteraction{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ApplicationInteraction')
	   	check{  
	   		if( (Collection {'composesApplicationFunctionApplicationFunction','aggregatesApplicationFunctionApplicationFunction','aggregatedByApplicationFunctionApplicationFunction','triggeredByApplicationFunctionApplicationFunction','triggersToApplicationFunctionApplicationFunction','flowsToApplicationFunctionApplicationFunction','flowsFromApplicationFunctionApplicationFunction','realizesApplicationServiceApplicationFunction','assignedToApplicationComponentApplicationFunction','usesApplicationServiceApplicationFunction','accessesDataObjectApplicationFunction','usesInfrastructureServiceApplicationFunction','composesApplicationInteractionApplicationInteraction','aggregatesApplicationInteractionApplicationInteraction','aggregatedByApplicationInteractionApplicationInteraction'}).includes(self.name) ){
	   		    			
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){
					if( (Collection {'composesApplicationFunctionApplicationFunction','aggregatesApplicationFunctionApplicationFunction','aggregatedByApplicationFunctionApplicationFunction','triggeredByApplicationFunctionApplicationFunction','triggersToApplicationFunctionApplicationFunction','flowsToApplicationFunctionApplicationFunction','flowsFromApplicationFunctionApplicationFunction'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'realizesApplicationServiceApplicationFunction','usesApplicationServiceApplicationFunction'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToApplicationComponentApplicationFunction'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){
					if( (Collection {'accessesDataObjectApplicationFunction'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){
					if( (Collection {'usesInfrastructureServiceApplicationFunction'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationInteraction'}).includes(self.target.typeName) ){
					if( (Collection {'composesApplicationInteractionApplicationInteraction','aggregatesApplicationInteractionApplicationInteraction','aggregatedByApplicationInteractionApplicationInteraction'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfApplicationFunctionApplicationFunction','composedOfApplicationInteractionApplicationInteraction'});
				     
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesApplicationFunctionApplicationFunction','aggregatesApplicationFunctionApplicationFunction','aggregatedByApplicationFunctionApplicationFunction','triggeredByApplicationFunctionApplicationFunction','triggersToApplicationFunctionApplicationFunction','flowsToApplicationFunctionApplicationFunction','flowsFromApplicationFunctionApplicationFunction'}) ); }			
     
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizesApplicationServiceApplicationFunction','usesApplicationServiceApplicationFunction'}) ); }			
     
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToApplicationComponentApplicationFunction'}) ); }			
     
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessesDataObjectApplicationFunction'}) ); }			
     
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesInfrastructureServiceApplicationFunction'}) ); }			
     
				if( (Collection {'ApplicationInteraction'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesApplicationInteractionApplicationInteraction','aggregatesApplicationInteractionApplicationInteraction','aggregatedByApplicationInteractionApplicationInteraction'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesApplicationFunctionApplicationFunction_SinceElement_ApplicationInteraction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationInteraction') and	(self.name == 'composesApplicationFunctionApplicationFunction')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesApplicationFunctionApplicationFunction' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByApplicationFunctionApplicationFunction_SinceElement_ApplicationInteraction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationInteraction') and	(self.name == 'aggregatedByApplicationFunctionApplicationFunction')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByApplicationFunctionApplicationFunction' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                
	critique hasTargetInstancesToCrossRelation_realizesApplicationServiceApplicationFunction_SinceElement_ApplicationInteraction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationInteraction') and	(self.name == 'realizesApplicationServiceApplicationFunction')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'realizesApplicationServiceApplicationFunction' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                
	critique hasTargetInstancesToCrossRelation_composesApplicationInteractionApplicationInteraction_SinceElement_ApplicationInteraction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationInteraction') and	(self.name == 'composesApplicationInteractionApplicationInteraction')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesApplicationInteractionApplicationInteraction' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByApplicationInteractionApplicationInteraction_SinceElement_ApplicationInteraction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationInteraction') and	(self.name == 'aggregatedByApplicationInteractionApplicationInteraction')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByApplicationInteractionApplicationInteraction' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	

      
	critique hasRightCrossRelationNameSinceElement_ApplicationInterface{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ApplicationInterface')
	   	check{  
	   		if( (Collection {'composesApplicationInterfaceApplicationInterface','aggregatesApplicationInterfaceApplicationInterface','aggregatedByApplicationInterfaceApplicationInterface','composesApplicationComponentApplicationInterface','usedByApplicationComponentApplicationInterface','assignedToApplicationServiceApplicationInterface','usedByBusinessActorApplicationInterface','usedByBusinessRoleApplicationInterface','assignedToBusinessServiceApplicationInterface'}).includes(self.name) ){
	   		    			
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){
					if( (Collection {'composesApplicationInterfaceApplicationInterface','aggregatesApplicationInterfaceApplicationInterface','aggregatedByApplicationInterfaceApplicationInterface'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'composesApplicationComponentApplicationInterface','usedByApplicationComponentApplicationInterface'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToApplicationServiceApplicationInterface'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){
					if( (Collection {'usedByBusinessActorApplicationInterface'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){
					if( (Collection {'usedByBusinessRoleApplicationInterface'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessServiceApplicationInterface'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfApplicationInterfaceApplicationInterface'});
				     
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesApplicationInterfaceApplicationInterface','aggregatesApplicationInterfaceApplicationInterface','aggregatedByApplicationInterfaceApplicationInterface'}) ); }			
     
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesApplicationComponentApplicationInterface','usedByApplicationComponentApplicationInterface'}) ); }			
     
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToApplicationServiceApplicationInterface'}) ); }			
     
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usedByBusinessActorApplicationInterface'}) ); }			
     
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usedByBusinessRoleApplicationInterface'}) ); }			
     
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessServiceApplicationInterface'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesApplicationInterfaceApplicationInterface_SinceElement_ApplicationInterface{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationInterface') and	(self.name == 'composesApplicationInterfaceApplicationInterface')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesApplicationInterfaceApplicationInterface' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByApplicationInterfaceApplicationInterface_SinceElement_ApplicationInterface{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationInterface') and	(self.name == 'aggregatedByApplicationInterfaceApplicationInterface')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByApplicationInterfaceApplicationInterface' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_composesApplicationComponentApplicationInterface_SinceElement_ApplicationInterface{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationInterface') and	(self.name == 'composesApplicationComponentApplicationInterface')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesApplicationComponentApplicationInterface' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
          
	critique hasTargetInstancesToCrossRelation_usedByBusinessActorApplicationInterface_SinceElement_ApplicationInterface{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationInterface') and	(self.name == 'usedByBusinessActorApplicationInterface')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'usedByBusinessActorApplicationInterface' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_usedByBusinessRoleApplicationInterface_SinceElement_ApplicationInterface{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationInterface') and	(self.name == 'usedByBusinessRoleApplicationInterface')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'usedByBusinessRoleApplicationInterface' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_assignedToBusinessServiceApplicationInterface_SinceElement_ApplicationInterface{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationInterface') and	(self.name == 'assignedToBusinessServiceApplicationInterface')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'assignedToBusinessServiceApplicationInterface' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	

      
	critique hasRightCrossRelationNameSinceElement_ApplicationService{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ApplicationService')
	   	check{  
	   		if( (Collection {'composesApplicationServiceApplicationService','aggregatesApplicationServiceApplicationService','aggregatedByApplicationServiceApplicationService','realizedByApplicationFunctionApplicationService','usedByApplicationFunctionApplicationService','assignedToApplicationInterfaceApplicationService','accessesDataObjectApplicationService','aggregatedByProductApplicationService','usedByBusinessBehaviorElementApplicationService','usedByBusinessActorApplicationService','usedByBusinessRoleApplicationService'}).includes(self.name) ){
	   		    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'composesApplicationServiceApplicationService','aggregatesApplicationServiceApplicationService','aggregatedByApplicationServiceApplicationService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){
					if( (Collection {'realizedByApplicationFunctionApplicationService','usedByApplicationFunctionApplicationService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToApplicationInterfaceApplicationService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){
					if( (Collection {'accessesDataObjectApplicationService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Product'}).includes(self.target.typeName) ){
					if( (Collection {'aggregatedByProductApplicationService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'usedByBusinessBehaviorElementApplicationService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){
					if( (Collection {'usedByBusinessActorApplicationService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){
					if( (Collection {'usedByBusinessRoleApplicationService'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfApplicationServiceApplicationService'});
				     
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesApplicationServiceApplicationService','aggregatesApplicationServiceApplicationService','aggregatedByApplicationServiceApplicationService'}) ); }			
     
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizedByApplicationFunctionApplicationService','usedByApplicationFunctionApplicationService'}) ); }			
     
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToApplicationInterfaceApplicationService'}) ); }			
     
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessesDataObjectApplicationService'}) ); }			
     
				if( (Collection {'Product'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'aggregatedByProductApplicationService'}) ); }			
     
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usedByBusinessBehaviorElementApplicationService'}) ); }			
     
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usedByBusinessActorApplicationService'}) ); }			
     
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usedByBusinessRoleApplicationService'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesApplicationServiceApplicationService_SinceElement_ApplicationService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationService') and	(self.name == 'composesApplicationServiceApplicationService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesApplicationServiceApplicationService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByApplicationServiceApplicationService_SinceElement_ApplicationService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationService') and	(self.name == 'aggregatedByApplicationServiceApplicationService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByApplicationServiceApplicationService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                
	critique hasTargetInstancesToCrossRelation_aggregatedByProductApplicationService_SinceElement_ApplicationService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationService') and	(self.name == 'aggregatedByProductApplicationService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByProductApplicationService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_usedByBusinessBehaviorElementApplicationService_SinceElement_ApplicationService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationService') and	(self.name == 'usedByBusinessBehaviorElementApplicationService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'usedByBusinessBehaviorElementApplicationService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_usedByBusinessActorApplicationService_SinceElement_ApplicationService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationService') and	(self.name == 'usedByBusinessActorApplicationService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'usedByBusinessActorApplicationService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_usedByBusinessRoleApplicationService_SinceElement_ApplicationService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_ApplicationService') and	(self.name == 'usedByBusinessRoleApplicationService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'usedByBusinessRoleApplicationService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	

      
	critique hasRightCrossRelationNameSinceElement_ArchimateModel{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'ArchimateModel')
	   	check{  
	   		if( (Collection {}).includes(self.name) ){
	   			return false;
			 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
	}	
	
      
	critique hasRightCrossRelationNameSinceElement_Artifact{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Artifact')
	   	check{  
	   		if( (Collection {'composesArtifactArtifact','aggregatesArtifactArtifact','aggregatedByArtifactArtifact','accessedByInfrastructureServiceArtifact','assignedToNodeArtifact','assignedFromLocationArtifact','realizesDataObjectArtifact','realizesApplicationComponentArtifact'}).includes(self.name) ){
	   		    			
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){
					if( (Collection {'composesArtifactArtifact','aggregatesArtifactArtifact','aggregatedByArtifactArtifact'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){
					if( (Collection {'accessedByInfrastructureServiceArtifact'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToNodeArtifact'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromLocationArtifact'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){
					if( (Collection {'realizesDataObjectArtifact'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'realizesApplicationComponentArtifact'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfArtifactArtifact'});
				     
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesArtifactArtifact','aggregatesArtifactArtifact','aggregatedByArtifactArtifact'}) ); }			
     
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessedByInfrastructureServiceArtifact'}) ); }			
     
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToNodeArtifact'}) ); }			
     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromLocationArtifact'}) ); }			
     
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizesDataObjectArtifact'}) ); }			
     
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizesApplicationComponentArtifact'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesArtifactArtifact_SinceElement_Artifact{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Artifact') and	(self.name == 'composesArtifactArtifact')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesArtifactArtifact' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByArtifactArtifact_SinceElement_Artifact{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Artifact') and	(self.name == 'aggregatedByArtifactArtifact')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByArtifactArtifact' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
          
	critique hasTargetInstancesToCrossRelation_assignedFromLocationArtifact_SinceElement_Artifact{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Artifact') and	(self.name == 'assignedFromLocationArtifact')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'assignedFromLocationArtifact' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_realizesDataObjectArtifact_SinceElement_Artifact{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Artifact') and	(self.name == 'realizesDataObjectArtifact')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'realizesDataObjectArtifact' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_realizesApplicationComponentArtifact_SinceElement_Artifact{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Artifact') and	(self.name == 'realizesApplicationComponentArtifact')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'realizesApplicationComponentArtifact' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	

      
	critique hasRightCrossRelationNameSinceElement_BusinessActor{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessActor')
	   	check{  
	   		if( (Collection {'composesBusinessActorBusinessActor','aggregatesBusinessActorBusinessActor','aggregatedByBusinessActorBusinessActor','aggregatesByBusinessCollaborationBusinessActor','usesBusinessInterfaceBusinessActor','assignedToBusinessRoleBusinessActor','usesElementBusinessServiceBusinessActor','assignedToLocationBusinessActor','usesApplicationServiceBusinessActor','usesApplicationInterfaceBusinessActor'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){
					if( (Collection {'composesBusinessActorBusinessActor','aggregatesBusinessActorBusinessActor','aggregatedByBusinessActorBusinessActor'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessCollaboration'}).includes(self.target.typeName) ){
					if( (Collection {'aggregatesByBusinessCollaborationBusinessActor'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessInterface'}).includes(self.target.typeName) ){
					if( (Collection {'usesBusinessInterfaceBusinessActor'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessRoleBusinessActor'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'usesElementBusinessServiceBusinessActor'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToLocationBusinessActor'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'usesApplicationServiceBusinessActor'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){
					if( (Collection {'usesApplicationInterfaceBusinessActor'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfBusinessActorBusinessActor'});
				     
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesBusinessActorBusinessActor','aggregatesBusinessActorBusinessActor','aggregatedByBusinessActorBusinessActor'}) ); }			
     
				if( (Collection {'BusinessCollaboration'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'aggregatesByBusinessCollaborationBusinessActor'}) ); }			
     
				if( (Collection {'BusinessInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesBusinessInterfaceBusinessActor'}) ); }			
     
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessRoleBusinessActor'}) ); }			
     
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesElementBusinessServiceBusinessActor'}) ); }			
     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToLocationBusinessActor'}) ); }			
     
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesApplicationServiceBusinessActor'}) ); }			
     
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesApplicationInterfaceBusinessActor'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesBusinessActorBusinessActor_SinceElement_BusinessActor{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessActor') and	(self.name == 'composesBusinessActorBusinessActor')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesBusinessActorBusinessActor' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessActorBusinessActor_SinceElement_BusinessActor{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessActor') and	(self.name == 'aggregatedByBusinessActorBusinessActor')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessActorBusinessActor' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                     
      
	critique hasRightCrossRelationNameSinceElement_BusinessBehaviorElement{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessBehaviorElement')
	   	check{  
	   		if( (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement','realisesBusinessServiceBusinessBehaviorElement','triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement','accessesBusinessObjectBusinessBehaviorElement','assignedToBusinessRoleBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement','usesApplicationServiceBusinessBehaviorElement','assignedFromApplicationComponentBusinessBehaviorElement'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'realisesBusinessServiceBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){
					if( (Collection {'triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'accessesBusinessObjectBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessRoleBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'usesApplicationServiceBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromApplicationComponentBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'});
				     
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realisesBusinessServiceBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessesBusinessObjectBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessRoleBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesApplicationServiceBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromApplicationComponentBusinessBehaviorElement'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesBusinessBehaviorElementBusinessBehaviorElement_SinceElement_BusinessBehaviorElement{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessBehaviorElement') and	(self.name == 'composesBusinessBehaviorElementBusinessBehaviorElement')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesBusinessBehaviorElementBusinessBehaviorElement' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessBehaviorElementBusinessBehaviorElement_SinceElement_BusinessBehaviorElement{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessBehaviorElement') and	(self.name == 'aggregatedByBusinessBehaviorElementBusinessBehaviorElement')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessBehaviorElementBusinessBehaviorElement' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                
	critique hasTargetInstancesToCrossRelation_realisesBusinessServiceBusinessBehaviorElement_SinceElement_BusinessBehaviorElement{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessBehaviorElement') and	(self.name == 'realisesBusinessServiceBusinessBehaviorElement')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'realisesBusinessServiceBusinessBehaviorElement' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                     
      
	critique hasRightCrossRelationNameSinceElement_BusinessCollaboration{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessCollaboration')
	   	check{  
	   		if( (Collection {'composesBusinessRoleBusinessRole','aggregatesBusinessRoleBusinessRole','aggregatedByBusinessRoleBusinessRole','aggregatedByBusinessCollaborationBusinessRole','assignedToBusinessActorBusinessRole','assignedToBusinessBehaviorElementBusinessRole','usesBusinessInterfaceBusinessRole','usesElementBusinessServiceBusinessRole','usesApplicationServiceBusinessRole','usesApplicationInterfaceBusinessRole','aggregatesBusinessActorBusinessCollaboration','aggregatesBusinessRoleBusinessCollaboration'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){
					if( (Collection {'composesBusinessRoleBusinessRole','aggregatesBusinessRoleBusinessRole','aggregatedByBusinessRoleBusinessRole','aggregatesBusinessRoleBusinessCollaboration'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessCollaboration'}).includes(self.target.typeName) ){
					if( (Collection {'aggregatedByBusinessCollaborationBusinessRole'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessActorBusinessRole','aggregatesBusinessActorBusinessCollaboration'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessBehaviorElementBusinessRole'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessInterface'}).includes(self.target.typeName) ){
					if( (Collection {'usesBusinessInterfaceBusinessRole'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'usesElementBusinessServiceBusinessRole'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'usesApplicationServiceBusinessRole'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){
					if( (Collection {'usesApplicationInterfaceBusinessRole'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfBusinessRoleBusinessRole','composedOfBusinessInterfaceBusinessRole'});
				     
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesBusinessRoleBusinessRole','aggregatesBusinessRoleBusinessRole','aggregatedByBusinessRoleBusinessRole','aggregatesBusinessRoleBusinessCollaboration'}) ); }			
     
				if( (Collection {'BusinessCollaboration'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'aggregatedByBusinessCollaborationBusinessRole'}) ); }			
     
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessActorBusinessRole','aggregatesBusinessActorBusinessCollaboration'}) ); }			
     
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessBehaviorElementBusinessRole'}) ); }			
     
				if( (Collection {'BusinessInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesBusinessInterfaceBusinessRole'}) ); }			
     
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesElementBusinessServiceBusinessRole'}) ); }			
     
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesApplicationServiceBusinessRole'}) ); }			
     
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesApplicationInterfaceBusinessRole'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesBusinessRoleBusinessRole_SinceElement_BusinessCollaboration{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessCollaboration') and	(self.name == 'composesBusinessRoleBusinessRole')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesBusinessRoleBusinessRole' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessRoleBusinessRole_SinceElement_BusinessCollaboration{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessCollaboration') and	(self.name == 'aggregatedByBusinessRoleBusinessRole')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessRoleBusinessRole' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessCollaborationBusinessRole_SinceElement_BusinessCollaboration{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessCollaboration') and	(self.name == 'aggregatedByBusinessCollaborationBusinessRole')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessCollaborationBusinessRole' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                        
      
	critique hasRightCrossRelationNameSinceElement_BusinessEvent{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessEvent')
	   	check{  
	   		if( (Collection {'composesBusinessEventBusinessEvent','aggregatesBusinessEventBusinessEvent','aggregatedByBusinessEventBusinessEvent','triggersByBusinessBehaviorElementBusinessEvent','triggersBusinessBehaviorElementBusinessEvent','accessedByBusinessObjectBusinessEvent'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){
					if( (Collection {'composesBusinessEventBusinessEvent','aggregatesBusinessEventBusinessEvent','aggregatedByBusinessEventBusinessEvent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'triggersByBusinessBehaviorElementBusinessEvent','triggersBusinessBehaviorElementBusinessEvent'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'accessedByBusinessObjectBusinessEvent'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfBusinessEventBusinessEvent'});
				     
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesBusinessEventBusinessEvent','aggregatesBusinessEventBusinessEvent','aggregatedByBusinessEventBusinessEvent'}) ); }			
     
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'triggersByBusinessBehaviorElementBusinessEvent','triggersBusinessBehaviorElementBusinessEvent'}) ); }			
     
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessedByBusinessObjectBusinessEvent'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesBusinessEventBusinessEvent_SinceElement_BusinessEvent{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessEvent') and	(self.name == 'composesBusinessEventBusinessEvent')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesBusinessEventBusinessEvent' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessEventBusinessEvent_SinceElement_BusinessEvent{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessEvent') and	(self.name == 'aggregatedByBusinessEventBusinessEvent')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessEventBusinessEvent' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
         
      
	critique hasRightCrossRelationNameSinceElement_BusinessFunction{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessFunction')
	   	check{  
	   		if( (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement','realisesBusinessServiceBusinessBehaviorElement','triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement','accessesBusinessObjectBusinessBehaviorElement','assignedToBusinessRoleBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement','usesApplicationServiceBusinessBehaviorElement','assignedFromApplicationComponentBusinessBehaviorElement'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'realisesBusinessServiceBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){
					if( (Collection {'triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'accessesBusinessObjectBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessRoleBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'usesApplicationServiceBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromApplicationComponentBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'});
				     
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realisesBusinessServiceBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessesBusinessObjectBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessRoleBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesApplicationServiceBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromApplicationComponentBusinessBehaviorElement'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesBusinessBehaviorElementBusinessBehaviorElement_SinceElement_BusinessFunction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessFunction') and	(self.name == 'composesBusinessBehaviorElementBusinessBehaviorElement')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesBusinessBehaviorElementBusinessBehaviorElement' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessBehaviorElementBusinessBehaviorElement_SinceElement_BusinessFunction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessFunction') and	(self.name == 'aggregatedByBusinessBehaviorElementBusinessBehaviorElement')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessBehaviorElementBusinessBehaviorElement' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                
	critique hasTargetInstancesToCrossRelation_realisesBusinessServiceBusinessBehaviorElement_SinceElement_BusinessFunction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessFunction') and	(self.name == 'realisesBusinessServiceBusinessBehaviorElement')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'realisesBusinessServiceBusinessBehaviorElement' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                     
      
	critique hasRightCrossRelationNameSinceElement_BusinessInteraction{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessInteraction')
	   	check{  
	   		if( (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement','realisesBusinessServiceBusinessBehaviorElement','triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement','accessesBusinessObjectBusinessBehaviorElement','assignedToBusinessRoleBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement','usesApplicationServiceBusinessBehaviorElement','assignedFromApplicationComponentBusinessBehaviorElement'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'realisesBusinessServiceBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){
					if( (Collection {'triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'accessesBusinessObjectBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessRoleBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'usesApplicationServiceBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromApplicationComponentBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'});
				     
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realisesBusinessServiceBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessesBusinessObjectBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessRoleBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesApplicationServiceBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromApplicationComponentBusinessBehaviorElement'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesBusinessBehaviorElementBusinessBehaviorElement_SinceElement_BusinessInteraction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessInteraction') and	(self.name == 'composesBusinessBehaviorElementBusinessBehaviorElement')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesBusinessBehaviorElementBusinessBehaviorElement' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessBehaviorElementBusinessBehaviorElement_SinceElement_BusinessInteraction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessInteraction') and	(self.name == 'aggregatedByBusinessBehaviorElementBusinessBehaviorElement')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessBehaviorElementBusinessBehaviorElement' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                
	critique hasTargetInstancesToCrossRelation_realisesBusinessServiceBusinessBehaviorElement_SinceElement_BusinessInteraction{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessInteraction') and	(self.name == 'realisesBusinessServiceBusinessBehaviorElement')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'realisesBusinessServiceBusinessBehaviorElement' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                     
      
	critique hasRightCrossRelationNameSinceElement_BusinessInterface{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessInterface')
	   	check{  
	   		if( (Collection {'composesBusinessInterfaceBusinessInterface','aggregatesBusinessInterfaceBusinessInterface','aggregatedByBusinessInterfaceBusinessInterface','composesBusinessRoleBusinessInterface','usedByBusinessActorBusinessInterface','usedByBusinessRoleBusinessInterface','assignedToBusinessServiceBusinessInterface'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessInterface'}).includes(self.target.typeName) ){
					if( (Collection {'composesBusinessInterfaceBusinessInterface','aggregatesBusinessInterfaceBusinessInterface','aggregatedByBusinessInterfaceBusinessInterface'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){
					if( (Collection {'composesBusinessRoleBusinessInterface','usedByBusinessRoleBusinessInterface'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){
					if( (Collection {'usedByBusinessActorBusinessInterface'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessServiceBusinessInterface'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfBusinessInterfaceBusinessInterface'});
				     
				if( (Collection {'BusinessInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesBusinessInterfaceBusinessInterface','aggregatesBusinessInterfaceBusinessInterface','aggregatedByBusinessInterfaceBusinessInterface'}) ); }			
     
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesBusinessRoleBusinessInterface','usedByBusinessRoleBusinessInterface'}) ); }			
     
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usedByBusinessActorBusinessInterface'}) ); }			
     
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessServiceBusinessInterface'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesBusinessInterfaceBusinessInterface_SinceElement_BusinessInterface{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessInterface') and	(self.name == 'composesBusinessInterfaceBusinessInterface')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesBusinessInterfaceBusinessInterface' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessInterfaceBusinessInterface_SinceElement_BusinessInterface{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessInterface') and	(self.name == 'aggregatedByBusinessInterfaceBusinessInterface')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessInterfaceBusinessInterface' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_composesBusinessRoleBusinessInterface_SinceElement_BusinessInterface{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessInterface') and	(self.name == 'composesBusinessRoleBusinessInterface')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesBusinessRoleBusinessInterface' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
         
      
	critique hasRightCrossRelationNameSinceElement_BusinessObject{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessObject')
	   	check{  
	   		if( (Collection {'composesBusinessObjectBusinessObject','aggregatesBusinessObjectBusinessObject','aggregatedByBusinessObjectBusinessObject','associatedWithMeaningBusinessObject','realizedByRepresentationBusinessObject','accessedByBusinessBehaviorElementBusinessObject','accessesBusinessEventBusinessObject','accessedByBusinessServiceBusinessObject','assignedToLocationBusinessObject','realizedByDataObjectBusinessObject'}).includes(self.name) ){
	   		    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'composesBusinessObjectBusinessObject','aggregatesBusinessObjectBusinessObject','aggregatedByBusinessObjectBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Meaning'}).includes(self.target.typeName) ){
					if( (Collection {'associatedWithMeaningBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Representation'}).includes(self.target.typeName) ){
					if( (Collection {'realizedByRepresentationBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'accessedByBusinessBehaviorElementBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){
					if( (Collection {'accessesBusinessEventBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'accessedByBusinessServiceBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToLocationBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){
					if( (Collection {'realizedByDataObjectBusinessObject'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfBusinessObjectBusinessObject'});
				     
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesBusinessObjectBusinessObject','aggregatesBusinessObjectBusinessObject','aggregatedByBusinessObjectBusinessObject'}) ); }			
     
				if( (Collection {'Meaning'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'associatedWithMeaningBusinessObject'}) ); }			
     
				if( (Collection {'Representation'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizedByRepresentationBusinessObject'}) ); }			
     
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessedByBusinessBehaviorElementBusinessObject'}) ); }			
     
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessesBusinessEventBusinessObject'}) ); }			
     
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessedByBusinessServiceBusinessObject'}) ); }			
     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToLocationBusinessObject'}) ); }			
     
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizedByDataObjectBusinessObject'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesBusinessObjectBusinessObject_SinceElement_BusinessObject{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessObject') and	(self.name == 'composesBusinessObjectBusinessObject')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesBusinessObjectBusinessObject' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessObjectBusinessObject_SinceElement_BusinessObject{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessObject') and	(self.name == 'aggregatedByBusinessObjectBusinessObject')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessObjectBusinessObject' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_associatedWithMeaningBusinessObject_SinceElement_BusinessObject{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessObject') and	(self.name == 'associatedWithMeaningBusinessObject')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'associatedWithMeaningBusinessObject' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                  
      
	critique hasRightCrossRelationNameSinceElement_BusinessProcess{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessProcess')
	   	check{  
	   		if( (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement','realisesBusinessServiceBusinessBehaviorElement','triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement','accessesBusinessObjectBusinessBehaviorElement','assignedToBusinessRoleBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement','usesApplicationServiceBusinessBehaviorElement','assignedFromApplicationComponentBusinessBehaviorElement'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'realisesBusinessServiceBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){
					if( (Collection {'triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'accessesBusinessObjectBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessRoleBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'usesApplicationServiceBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromApplicationComponentBusinessBehaviorElement'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfBusinessBehaviorElementBusinessBehaviorElement'});
				     
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesBusinessBehaviorElementBusinessBehaviorElement','aggregatesBusinessBehaviorElementBusinessBehaviorElement','aggregatedByBusinessBehaviorElementBusinessBehaviorElement','triggersToBusinessBehaviorElementBusinessBehaviorElement','triggeredByBusinessBehaviorElementBusinessBehaviorElement','flowsFromBusinessBehaviorElementBusinessBehaviorElement','flowsToBusinessBehaviorElementBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realisesBusinessServiceBusinessBehaviorElement','usesBusinessServiceBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'triggersBusinessEventBusinessBehaviorElement','triggersByBusinessEventBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessesBusinessObjectBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessRoleBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesApplicationServiceBusinessBehaviorElement'}) ); }			
     
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromApplicationComponentBusinessBehaviorElement'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesBusinessBehaviorElementBusinessBehaviorElement_SinceElement_BusinessProcess{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessProcess') and	(self.name == 'composesBusinessBehaviorElementBusinessBehaviorElement')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesBusinessBehaviorElementBusinessBehaviorElement' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessBehaviorElementBusinessBehaviorElement_SinceElement_BusinessProcess{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessProcess') and	(self.name == 'aggregatedByBusinessBehaviorElementBusinessBehaviorElement')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessBehaviorElementBusinessBehaviorElement' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                
	critique hasTargetInstancesToCrossRelation_realisesBusinessServiceBusinessBehaviorElement_SinceElement_BusinessProcess{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessProcess') and	(self.name == 'realisesBusinessServiceBusinessBehaviorElement')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'realisesBusinessServiceBusinessBehaviorElement' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                     
      
	critique hasRightCrossRelationNameSinceElement_BusinessRole{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessRole')
	   	check{  
	   		if( (Collection {'composesBusinessRoleBusinessRole','aggregatesBusinessRoleBusinessRole','aggregatedByBusinessRoleBusinessRole','aggregatedByBusinessCollaborationBusinessRole','assignedToBusinessActorBusinessRole','assignedToBusinessBehaviorElementBusinessRole','usesBusinessInterfaceBusinessRole','usesElementBusinessServiceBusinessRole','usesApplicationServiceBusinessRole','usesApplicationInterfaceBusinessRole'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){
					if( (Collection {'composesBusinessRoleBusinessRole','aggregatesBusinessRoleBusinessRole','aggregatedByBusinessRoleBusinessRole'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessCollaboration'}).includes(self.target.typeName) ){
					if( (Collection {'aggregatedByBusinessCollaborationBusinessRole'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessActorBusinessRole'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessBehaviorElementBusinessRole'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessInterface'}).includes(self.target.typeName) ){
					if( (Collection {'usesBusinessInterfaceBusinessRole'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'usesElementBusinessServiceBusinessRole'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'usesApplicationServiceBusinessRole'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){
					if( (Collection {'usesApplicationInterfaceBusinessRole'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfBusinessRoleBusinessRole','composedOfBusinessInterfaceBusinessRole'});
				     
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesBusinessRoleBusinessRole','aggregatesBusinessRoleBusinessRole','aggregatedByBusinessRoleBusinessRole'}) ); }			
     
				if( (Collection {'BusinessCollaboration'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'aggregatedByBusinessCollaborationBusinessRole'}) ); }			
     
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessActorBusinessRole'}) ); }			
     
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessBehaviorElementBusinessRole'}) ); }			
     
				if( (Collection {'BusinessInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesBusinessInterfaceBusinessRole'}) ); }			
     
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesElementBusinessServiceBusinessRole'}) ); }			
     
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesApplicationServiceBusinessRole'}) ); }			
     
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesApplicationInterfaceBusinessRole'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesBusinessRoleBusinessRole_SinceElement_BusinessRole{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessRole') and	(self.name == 'composesBusinessRoleBusinessRole')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesBusinessRoleBusinessRole' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessRoleBusinessRole_SinceElement_BusinessRole{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessRole') and	(self.name == 'aggregatedByBusinessRoleBusinessRole')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessRoleBusinessRole' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessCollaborationBusinessRole_SinceElement_BusinessRole{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessRole') and	(self.name == 'aggregatedByBusinessCollaborationBusinessRole')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessCollaborationBusinessRole' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                  
      
	critique hasRightCrossRelationNameSinceElement_BusinessService{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'BusinessService')
	   	check{  
	   		if( (Collection {'composesBusinessServiceBusinessService','aggregatesBusinessServiceBusinessService','aggregatedByBusinessServiceBusinessService','aggregatedByProductBusinessService','usedByBusinessActorBusinessService','realizedByBusinessBehaviorElementBusinessService','usedByBusinessBehaviorElementBusinessService','assignedToBusinessInterfaceBusinessService','accessesBusinessObjectBusinessService','usedByElementBusinessRoleBusinessService','assignedFromApplicationInterfaceBusinessService'}).includes(self.name) ){
	   		    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'composesBusinessServiceBusinessService','aggregatesBusinessServiceBusinessService','aggregatedByBusinessServiceBusinessService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Product'}).includes(self.target.typeName) ){
					if( (Collection {'aggregatedByProductBusinessService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){
					if( (Collection {'usedByBusinessActorBusinessService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'realizedByBusinessBehaviorElementBusinessService','usedByBusinessBehaviorElementBusinessService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessInterface'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToBusinessInterfaceBusinessService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'accessesBusinessObjectBusinessService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){
					if( (Collection {'usedByElementBusinessRoleBusinessService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromApplicationInterfaceBusinessService'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfBusinessServiceBusinessService'});
				     
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesBusinessServiceBusinessService','aggregatesBusinessServiceBusinessService','aggregatedByBusinessServiceBusinessService'}) ); }			
     
				if( (Collection {'Product'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'aggregatedByProductBusinessService'}) ); }			
     
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usedByBusinessActorBusinessService'}) ); }			
     
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizedByBusinessBehaviorElementBusinessService','usedByBusinessBehaviorElementBusinessService'}) ); }			
     
				if( (Collection {'BusinessInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToBusinessInterfaceBusinessService'}) ); }			
     
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessesBusinessObjectBusinessService'}) ); }			
     
				if( (Collection {'BusinessCollaboration','BusinessRole'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usedByElementBusinessRoleBusinessService'}) ); }			
     
				if( (Collection {'ApplicationInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromApplicationInterfaceBusinessService'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesBusinessServiceBusinessService_SinceElement_BusinessService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessService') and	(self.name == 'composesBusinessServiceBusinessService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesBusinessServiceBusinessService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessServiceBusinessService_SinceElement_BusinessService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessService') and	(self.name == 'aggregatedByBusinessServiceBusinessService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessServiceBusinessService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_aggregatedByProductBusinessService_SinceElement_BusinessService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_BusinessService') and	(self.name == 'aggregatedByProductBusinessService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByProductBusinessService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                     
      
	critique hasRightCrossRelationNameSinceElement_CommunicationPath{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'CommunicationPath')
	   	check{  
	   		if( (Collection {'composesCommunicationPathCommunicationPath','aggregatesCommunicationPathCommunicationPath','aggregatedByCommunicationPathCommunicationPath','associatedWithNodeCommunicationPath','realizedByNetworkCommunicationPath','assignedFromLocationCommunicationPath'}).includes(self.name) ){
	   		    			
				if( (Collection {'CommunicationPath'}).includes(self.target.typeName) ){
					if( (Collection {'composesCommunicationPathCommunicationPath','aggregatesCommunicationPathCommunicationPath','aggregatedByCommunicationPathCommunicationPath'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){
					if( (Collection {'associatedWithNodeCommunicationPath'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Network'}).includes(self.target.typeName) ){
					if( (Collection {'realizedByNetworkCommunicationPath'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromLocationCommunicationPath'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfCommunicationPathCommunicationPath'});
				     
				if( (Collection {'CommunicationPath'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesCommunicationPathCommunicationPath','aggregatesCommunicationPathCommunicationPath','aggregatedByCommunicationPathCommunicationPath'}) ); }			
     
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'associatedWithNodeCommunicationPath'}) ); }			
     
				if( (Collection {'Network'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizedByNetworkCommunicationPath'}) ); }			
     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromLocationCommunicationPath'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesCommunicationPathCommunicationPath_SinceElement_CommunicationPath{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_CommunicationPath') and	(self.name == 'composesCommunicationPathCommunicationPath')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesCommunicationPathCommunicationPath' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByCommunicationPathCommunicationPath_SinceElement_CommunicationPath{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_CommunicationPath') and	(self.name == 'aggregatedByCommunicationPathCommunicationPath')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByCommunicationPathCommunicationPath' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_associatedWithNodeCommunicationPath_SinceElement_CommunicationPath{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_CommunicationPath') and	(self.name == 'associatedWithNodeCommunicationPath')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'associatedWithNodeCommunicationPath' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_assignedFromLocationCommunicationPath_SinceElement_CommunicationPath{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_CommunicationPath') and	(self.name == 'assignedFromLocationCommunicationPath')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'assignedFromLocationCommunicationPath' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	

      
	critique hasRightCrossRelationNameSinceElement_Contract{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Contract')
	   	check{  
	   		if( (Collection {'composesBusinessObjectBusinessObject','aggregatesBusinessObjectBusinessObject','aggregatedByBusinessObjectBusinessObject','associatedWithMeaningBusinessObject','realizedByRepresentationBusinessObject','accessedByBusinessBehaviorElementBusinessObject','accessesBusinessEventBusinessObject','accessedByBusinessServiceBusinessObject','assignedToLocationBusinessObject','realizedByDataObjectBusinessObject','composesContractContract','aggregatesContractContract','aggregatedByContractContract','aggregatedByProductContract'}).includes(self.name) ){
	   		    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'composesBusinessObjectBusinessObject','aggregatesBusinessObjectBusinessObject','aggregatedByBusinessObjectBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Meaning'}).includes(self.target.typeName) ){
					if( (Collection {'associatedWithMeaningBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Representation'}).includes(self.target.typeName) ){
					if( (Collection {'realizedByRepresentationBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){
					if( (Collection {'accessedByBusinessBehaviorElementBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){
					if( (Collection {'accessesBusinessEventBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'accessedByBusinessServiceBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToLocationBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){
					if( (Collection {'realizedByDataObjectBusinessObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Contract'}).includes(self.target.typeName) ){
					if( (Collection {'composesContractContract','aggregatesContractContract','aggregatedByContractContract'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Product'}).includes(self.target.typeName) ){
					if( (Collection {'aggregatedByProductContract'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfBusinessObjectBusinessObject','composedOfContractContract'});
				     
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesBusinessObjectBusinessObject','aggregatesBusinessObjectBusinessObject','aggregatedByBusinessObjectBusinessObject'}) ); }			
     
				if( (Collection {'Meaning'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'associatedWithMeaningBusinessObject'}) ); }			
     
				if( (Collection {'Representation'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizedByRepresentationBusinessObject'}) ); }			
     
				if( (Collection {'BusinessFunction','BusinessInteraction','BusinessProcess','BusinessBehaviorElement'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessedByBusinessBehaviorElementBusinessObject'}) ); }			
     
				if( (Collection {'BusinessEvent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessesBusinessEventBusinessObject'}) ); }			
     
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessedByBusinessServiceBusinessObject'}) ); }			
     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToLocationBusinessObject'}) ); }			
     
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizedByDataObjectBusinessObject'}) ); }			
     
				if( (Collection {'Contract'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesContractContract','aggregatesContractContract','aggregatedByContractContract'}) ); }			
     
				if( (Collection {'Product'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'aggregatedByProductContract'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesBusinessObjectBusinessObject_SinceElement_Contract{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Contract') and	(self.name == 'composesBusinessObjectBusinessObject')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesBusinessObjectBusinessObject' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByBusinessObjectBusinessObject_SinceElement_Contract{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Contract') and	(self.name == 'aggregatedByBusinessObjectBusinessObject')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByBusinessObjectBusinessObject' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_associatedWithMeaningBusinessObject_SinceElement_Contract{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Contract') and	(self.name == 'associatedWithMeaningBusinessObject')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'associatedWithMeaningBusinessObject' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                      
	critique hasTargetInstancesToCrossRelation_composesContractContract_SinceElement_Contract{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Contract') and	(self.name == 'composesContractContract')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesContractContract' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByContractContract_SinceElement_Contract{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Contract') and	(self.name == 'aggregatedByContractContract')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByContractContract' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_aggregatedByProductContract_SinceElement_Contract{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Contract') and	(self.name == 'aggregatedByProductContract')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByProductContract' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	

      
	critique hasRightCrossRelationNameSinceElement_DataObject{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'DataObject')
	   	check{  
	   		if( (Collection {'composesDataObjectDataObject','aggregatesDataObjectDataObject','aggregatedByDataObjectDataObject','accessedByApplicationFunctionDataObject','accessedByApplicationServiceDataObject','realizedByArtifactDataObject','realizesBusinessObjectDataObject','assignedFromLocationDataObject'}).includes(self.name) ){
	   		    			
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){
					if( (Collection {'composesDataObjectDataObject','aggregatesDataObjectDataObject','aggregatedByDataObjectDataObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){
					if( (Collection {'accessedByApplicationFunctionDataObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'accessedByApplicationServiceDataObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){
					if( (Collection {'realizedByArtifactDataObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'realizesBusinessObjectDataObject'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromLocationDataObject'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfDataObjectDataObject'});
				     
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesDataObjectDataObject','aggregatesDataObjectDataObject','aggregatedByDataObjectDataObject'}) ); }			
     
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessedByApplicationFunctionDataObject'}) ); }			
     
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessedByApplicationServiceDataObject'}) ); }			
     
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizedByArtifactDataObject'}) ); }			
     
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizesBusinessObjectDataObject'}) ); }			
     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromLocationDataObject'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesDataObjectDataObject_SinceElement_DataObject{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_DataObject') and	(self.name == 'composesDataObjectDataObject')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesDataObjectDataObject' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByDataObjectDataObject_SinceElement_DataObject{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_DataObject') and	(self.name == 'aggregatedByDataObjectDataObject')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByDataObjectDataObject' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
             
	critique hasTargetInstancesToCrossRelation_realizesBusinessObjectDataObject_SinceElement_DataObject{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_DataObject') and	(self.name == 'realizesBusinessObjectDataObject')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'realizesBusinessObjectDataObject' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_assignedFromLocationDataObject_SinceElement_DataObject{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_DataObject') and	(self.name == 'assignedFromLocationDataObject')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'assignedFromLocationDataObject' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	

      
	critique hasRightCrossRelationNameSinceElement_Device{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Device')
	   	check{  
	   		if( (Collection {'composesNodeNode','aggregatesNodeNode','aggregatedByNodeNode','associatedWithCommunicationPathNode','assignedToArtifactNode','usesInfrastructureInterfaceNode','usesInfrastructureServiceNode','assignedFromLocationNode','composesDeviceDevice','aggregatesDeviceDevice','aggregatedByDeviceDevice','associatedWithNetworkDevice','assignedToSystemSoftwareDevice'}).includes(self.name) ){
	   		    			
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){
					if( (Collection {'composesNodeNode','aggregatesNodeNode','aggregatedByNodeNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'CommunicationPath'}).includes(self.target.typeName) ){
					if( (Collection {'associatedWithCommunicationPathNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToArtifactNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){
					if( (Collection {'usesInfrastructureInterfaceNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){
					if( (Collection {'usesInfrastructureServiceNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromLocationNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Device'}).includes(self.target.typeName) ){
					if( (Collection {'composesDeviceDevice','aggregatesDeviceDevice','aggregatedByDeviceDevice'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Network'}).includes(self.target.typeName) ){
					if( (Collection {'associatedWithNetworkDevice'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'SystemSoftware'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToSystemSoftwareDevice'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfNodeNode','composedOfInfrastructureInterfaceNode','composedOfDeviceDevice'});
				     
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesNodeNode','aggregatesNodeNode','aggregatedByNodeNode'}) ); }			
     
				if( (Collection {'CommunicationPath'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'associatedWithCommunicationPathNode'}) ); }			
     
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToArtifactNode'}) ); }			
     
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesInfrastructureInterfaceNode'}) ); }			
     
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesInfrastructureServiceNode'}) ); }			
     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromLocationNode'}) ); }			
     
				if( (Collection {'Device'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesDeviceDevice','aggregatesDeviceDevice','aggregatedByDeviceDevice'}) ); }			
     
				if( (Collection {'Network'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'associatedWithNetworkDevice'}) ); }			
     
				if( (Collection {'SystemSoftware'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToSystemSoftwareDevice'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesNodeNode_SinceElement_Device{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Device') and	(self.name == 'composesNodeNode')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesNodeNode' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByNodeNode_SinceElement_Device{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Device') and	(self.name == 'aggregatedByNodeNode')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByNodeNode' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_associatedWithCommunicationPathNode_SinceElement_Device{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Device') and	(self.name == 'associatedWithCommunicationPathNode')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'associatedWithCommunicationPathNode' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
             
	critique hasTargetInstancesToCrossRelation_assignedFromLocationNode_SinceElement_Device{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Device') and	(self.name == 'assignedFromLocationNode')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'assignedFromLocationNode' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_composesDeviceDevice_SinceElement_Device{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Device') and	(self.name == 'composesDeviceDevice')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesDeviceDevice' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByDeviceDevice_SinceElement_Device{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Device') and	(self.name == 'aggregatedByDeviceDevice')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByDeviceDevice' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_associatedWithNetworkDevice_SinceElement_Device{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Device') and	(self.name == 'associatedWithNetworkDevice')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'associatedWithNetworkDevice' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
   
      
	critique hasRightCrossRelationNameSinceElement_InfrastructureInterface{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'InfrastructureInterface')
	   	check{  
	   		if( (Collection {'composesInfrastructureInterfaceInfrastructureInterface','aggregatesInfrastructureInterfaceInfrastructureInterface','aggregatedByInfrastructureInterfaceInfrastructureInterface','composesNodeInfrastructureInterface','assignedToInfrastructureServiceInfrastructureInterface','usedByNodeInfrastructureInterface','usesByApplicationComponentInfrastructureInterface'}).includes(self.name) ){
	   		    			
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){
					if( (Collection {'composesInfrastructureInterfaceInfrastructureInterface','aggregatesInfrastructureInterfaceInfrastructureInterface','aggregatedByInfrastructureInterfaceInfrastructureInterface'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){
					if( (Collection {'composesNodeInfrastructureInterface','usedByNodeInfrastructureInterface'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToInfrastructureServiceInfrastructureInterface'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'usesByApplicationComponentInfrastructureInterface'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfInfrastructureInterfaceInfrastructureInterface'});
				     
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesInfrastructureInterfaceInfrastructureInterface','aggregatesInfrastructureInterfaceInfrastructureInterface','aggregatedByInfrastructureInterfaceInfrastructureInterface'}) ); }			
     
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesNodeInfrastructureInterface','usedByNodeInfrastructureInterface'}) ); }			
     
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToInfrastructureServiceInfrastructureInterface'}) ); }			
     
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesByApplicationComponentInfrastructureInterface'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesInfrastructureInterfaceInfrastructureInterface_SinceElement_InfrastructureInterface{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_InfrastructureInterface') and	(self.name == 'composesInfrastructureInterfaceInfrastructureInterface')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesInfrastructureInterfaceInfrastructureInterface' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByInfrastructureInterfaceInfrastructureInterface_SinceElement_InfrastructureInterface{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_InfrastructureInterface') and	(self.name == 'aggregatedByInfrastructureInterfaceInfrastructureInterface')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByInfrastructureInterfaceInfrastructureInterface' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_composesNodeInfrastructureInterface_SinceElement_InfrastructureInterface{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_InfrastructureInterface') and	(self.name == 'composesNodeInfrastructureInterface')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesNodeInfrastructureInterface' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
          
	critique hasTargetInstancesToCrossRelation_usesByApplicationComponentInfrastructureInterface_SinceElement_InfrastructureInterface{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_InfrastructureInterface') and	(self.name == 'usesByApplicationComponentInfrastructureInterface')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'usesByApplicationComponentInfrastructureInterface' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	

      
	critique hasRightCrossRelationNameSinceElement_InfrastructureService{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'InfrastructureService')
	   	check{  
	   		if( (Collection {'composesInfrastructureServiceInfrastructureService','aggregatesInfrastructureServiceInfrastructureService','aggregatedByInfrastructureServiceInfrastructureService','accessesArtifactInfrastructureService','assignedToInfrastructureInterfaceInfrastructureService','realizedByNodeInfrastructureService','aggregatedByProductInfrastructureService','usesByApplicationComponentInfrastructureService','usesByApplicationFunctionInfrastructureService'}).includes(self.name) ){
	   		    			
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){
					if( (Collection {'composesInfrastructureServiceInfrastructureService','aggregatesInfrastructureServiceInfrastructureService','aggregatedByInfrastructureServiceInfrastructureService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){
					if( (Collection {'accessesArtifactInfrastructureService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToInfrastructureInterfaceInfrastructureService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){
					if( (Collection {'realizedByNodeInfrastructureService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Product'}).includes(self.target.typeName) ){
					if( (Collection {'aggregatedByProductInfrastructureService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'usesByApplicationComponentInfrastructureService'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){
					if( (Collection {'usesByApplicationFunctionInfrastructureService'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfInfrastructureServiceInfrastructureService'});
				     
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesInfrastructureServiceInfrastructureService','aggregatesInfrastructureServiceInfrastructureService','aggregatedByInfrastructureServiceInfrastructureService'}) ); }			
     
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'accessesArtifactInfrastructureService'}) ); }			
     
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToInfrastructureInterfaceInfrastructureService'}) ); }			
     
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizedByNodeInfrastructureService'}) ); }			
     
				if( (Collection {'Product'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'aggregatedByProductInfrastructureService'}) ); }			
     
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesByApplicationComponentInfrastructureService'}) ); }			
     
				if( (Collection {'ApplicationInteraction','ApplicationFunction'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesByApplicationFunctionInfrastructureService'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesInfrastructureServiceInfrastructureService_SinceElement_InfrastructureService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_InfrastructureService') and	(self.name == 'composesInfrastructureServiceInfrastructureService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesInfrastructureServiceInfrastructureService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByInfrastructureServiceInfrastructureService_SinceElement_InfrastructureService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_InfrastructureService') and	(self.name == 'aggregatedByInfrastructureServiceInfrastructureService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByInfrastructureServiceInfrastructureService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
             
	critique hasTargetInstancesToCrossRelation_aggregatedByProductInfrastructureService_SinceElement_InfrastructureService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_InfrastructureService') and	(self.name == 'aggregatedByProductInfrastructureService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByProductInfrastructureService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_usesByApplicationComponentInfrastructureService_SinceElement_InfrastructureService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_InfrastructureService') and	(self.name == 'usesByApplicationComponentInfrastructureService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'usesByApplicationComponentInfrastructureService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_usesByApplicationFunctionInfrastructureService_SinceElement_InfrastructureService{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_InfrastructureService') and	(self.name == 'usesByApplicationFunctionInfrastructureService')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'usesByApplicationFunctionInfrastructureService' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	

      
	critique hasRightCrossRelationNameSinceElement_Location{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Location')
	   	check{  
	   		if( (Collection {'composesLocationLocation','aggregatesLocationLocation','aggregatedByLocationLocation','assignedFromBusinessActorLocation','assignedFromBusinessObjectLocation','assignedFromRepresentationLocation','assignedToDataObjectLocation','assignedToApplicationComponentLocation','assignedToNodeLocation','assignedToNetworkLocation','assignedToCommunicationPathLocation','assignedToArtifactLocation'}).includes(self.name) ){
	   		    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'composesLocationLocation','aggregatesLocationLocation','aggregatedByLocationLocation'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromBusinessActorLocation'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromBusinessObjectLocation'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Representation'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromRepresentationLocation'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToDataObjectLocation'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToApplicationComponentLocation'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToNodeLocation'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Network'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToNetworkLocation'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'CommunicationPath'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToCommunicationPathLocation'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToArtifactLocation'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfLocationLocation'});
				     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesLocationLocation','aggregatesLocationLocation','aggregatedByLocationLocation'}) ); }			
     
				if( (Collection {'BusinessActor'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromBusinessActorLocation'}) ); }			
     
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromBusinessObjectLocation'}) ); }			
     
				if( (Collection {'Representation'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromRepresentationLocation'}) ); }			
     
				if( (Collection {'DataObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToDataObjectLocation'}) ); }			
     
				if( (Collection {'ApplicationCollaboration','ApplicationComponent'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToApplicationComponentLocation'}) ); }			
     
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToNodeLocation'}) ); }			
     
				if( (Collection {'Network'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToNetworkLocation'}) ); }			
     
				if( (Collection {'CommunicationPath'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToCommunicationPathLocation'}) ); }			
     
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToArtifactLocation'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesLocationLocation_SinceElement_Location{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Location') and	(self.name == 'composesLocationLocation')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesLocationLocation' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByLocationLocation_SinceElement_Location{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Location') and	(self.name == 'aggregatedByLocationLocation')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByLocationLocation' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
                           
      
	critique hasRightCrossRelationNameSinceElement_Meaning{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Meaning')
	   	check{  
	   		if( (Collection {'composesMeaningMeaning','aggregatesMeaningMeaning','aggregatedByMeaningMeaning','associatedWithBusinessObjectMeaning'}).includes(self.name) ){
	   		    			
				if( (Collection {'Meaning'}).includes(self.target.typeName) ){
					if( (Collection {'composesMeaningMeaning','aggregatesMeaningMeaning','aggregatedByMeaningMeaning'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'associatedWithBusinessObjectMeaning'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfMeaningMeaning'});
				     
				if( (Collection {'Meaning'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesMeaningMeaning','aggregatesMeaningMeaning','aggregatedByMeaningMeaning'}) ); }			
     
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'associatedWithBusinessObjectMeaning'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesMeaningMeaning_SinceElement_Meaning{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Meaning') and	(self.name == 'composesMeaningMeaning')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesMeaningMeaning' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByMeaningMeaning_SinceElement_Meaning{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Meaning') and	(self.name == 'aggregatedByMeaningMeaning')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByMeaningMeaning' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_associatedWithBusinessObjectMeaning_SinceElement_Meaning{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Meaning') and	(self.name == 'associatedWithBusinessObjectMeaning')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'associatedWithBusinessObjectMeaning' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	

      
	critique hasRightCrossRelationNameSinceElement_Network{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Network')
	   	check{  
	   		if( (Collection {'composesNetworkNetwork','aggregatesNetworkNetwork','aggregatedByNetworkNetwork','realizesCommunicationPathNetwork','associatedWithDeviceNetwork','assignedFromLocationNetwork'}).includes(self.name) ){
	   		    			
				if( (Collection {'Network'}).includes(self.target.typeName) ){
					if( (Collection {'composesNetworkNetwork','aggregatesNetworkNetwork','aggregatedByNetworkNetwork'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'CommunicationPath'}).includes(self.target.typeName) ){
					if( (Collection {'realizesCommunicationPathNetwork'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Device'}).includes(self.target.typeName) ){
					if( (Collection {'associatedWithDeviceNetwork'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromLocationNetwork'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfNetworkNetwork'});
				     
				if( (Collection {'Network'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesNetworkNetwork','aggregatesNetworkNetwork','aggregatedByNetworkNetwork'}) ); }			
     
				if( (Collection {'CommunicationPath'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizesCommunicationPathNetwork'}) ); }			
     
				if( (Collection {'Device'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'associatedWithDeviceNetwork'}) ); }			
     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromLocationNetwork'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesNetworkNetwork_SinceElement_Network{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Network') and	(self.name == 'composesNetworkNetwork')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesNetworkNetwork' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByNetworkNetwork_SinceElement_Network{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Network') and	(self.name == 'aggregatedByNetworkNetwork')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByNetworkNetwork' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_realizesCommunicationPathNetwork_SinceElement_Network{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Network') and	(self.name == 'realizesCommunicationPathNetwork')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'realizesCommunicationPathNetwork' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_associatedWithDeviceNetwork_SinceElement_Network{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Network') and	(self.name == 'associatedWithDeviceNetwork')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'associatedWithDeviceNetwork' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_assignedFromLocationNetwork_SinceElement_Network{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Network') and	(self.name == 'assignedFromLocationNetwork')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'assignedFromLocationNetwork' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	

      
	critique hasRightCrossRelationNameSinceElement_Node{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Node')
	   	check{  
	   		if( (Collection {'composesNodeNode','aggregatesNodeNode','aggregatedByNodeNode','associatedWithCommunicationPathNode','assignedToArtifactNode','usesInfrastructureInterfaceNode','usesInfrastructureServiceNode','assignedFromLocationNode'}).includes(self.name) ){
	   		    			
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){
					if( (Collection {'composesNodeNode','aggregatesNodeNode','aggregatedByNodeNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'CommunicationPath'}).includes(self.target.typeName) ){
					if( (Collection {'associatedWithCommunicationPathNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToArtifactNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){
					if( (Collection {'usesInfrastructureInterfaceNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){
					if( (Collection {'usesInfrastructureServiceNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromLocationNode'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfNodeNode','composedOfInfrastructureInterfaceNode'});
				     
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesNodeNode','aggregatesNodeNode','aggregatedByNodeNode'}) ); }			
     
				if( (Collection {'CommunicationPath'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'associatedWithCommunicationPathNode'}) ); }			
     
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToArtifactNode'}) ); }			
     
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesInfrastructureInterfaceNode'}) ); }			
     
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesInfrastructureServiceNode'}) ); }			
     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromLocationNode'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesNodeNode_SinceElement_Node{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Node') and	(self.name == 'composesNodeNode')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesNodeNode' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByNodeNode_SinceElement_Node{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Node') and	(self.name == 'aggregatedByNodeNode')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByNodeNode' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_associatedWithCommunicationPathNode_SinceElement_Node{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Node') and	(self.name == 'associatedWithCommunicationPathNode')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'associatedWithCommunicationPathNode' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
             
	critique hasTargetInstancesToCrossRelation_assignedFromLocationNode_SinceElement_Node{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Node') and	(self.name == 'assignedFromLocationNode')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'assignedFromLocationNode' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	

      
	critique hasRightCrossRelationNameSinceElement_Product{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Product')
	   	check{  
	   		if( (Collection {'composesProductProduct','aggregatesProductProduct','aggregatedByProductProduct','associatedWithValueProduct','aggregatesContractProduct','aggregatesBusinessServiceProduct','aggregatesInfrastructureServiceProduct','aggregatesApplicationServiceProduct'}).includes(self.name) ){
	   		    			
				if( (Collection {'Product'}).includes(self.target.typeName) ){
					if( (Collection {'composesProductProduct','aggregatesProductProduct','aggregatedByProductProduct'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Value'}).includes(self.target.typeName) ){
					if( (Collection {'associatedWithValueProduct'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Contract'}).includes(self.target.typeName) ){
					if( (Collection {'aggregatesContractProduct'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){
					if( (Collection {'aggregatesBusinessServiceProduct'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){
					if( (Collection {'aggregatesInfrastructureServiceProduct'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){
					if( (Collection {'aggregatesApplicationServiceProduct'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfProductProduct'});
				     
				if( (Collection {'Product'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesProductProduct','aggregatesProductProduct','aggregatedByProductProduct'}) ); }			
     
				if( (Collection {'Value'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'associatedWithValueProduct'}) ); }			
     
				if( (Collection {'Contract'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'aggregatesContractProduct'}) ); }			
     
				if( (Collection {'BusinessService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'aggregatesBusinessServiceProduct'}) ); }			
     
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'aggregatesInfrastructureServiceProduct'}) ); }			
     
				if( (Collection {'ApplicationService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'aggregatesApplicationServiceProduct'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesProductProduct_SinceElement_Product{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Product') and	(self.name == 'composesProductProduct')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesProductProduct' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByProductProduct_SinceElement_Product{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Product') and	(self.name == 'aggregatedByProductProduct')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByProductProduct' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_associatedWithValueProduct_SinceElement_Product{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Product') and	(self.name == 'associatedWithValueProduct')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'associatedWithValueProduct' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
            
      
	critique hasRightCrossRelationNameSinceElement_Representation{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Representation')
	   	check{  
	   		if( (Collection {'composesRepresentationRepresentation','aggregatesRepresentationRepresentation','aggregatedByRepresentationRepresentation','realizesBusinessObjectRepresentation','assignedToLocationRepresentation'}).includes(self.name) ){
	   		    			
				if( (Collection {'Representation'}).includes(self.target.typeName) ){
					if( (Collection {'composesRepresentationRepresentation','aggregatesRepresentationRepresentation','aggregatedByRepresentationRepresentation'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){
					if( (Collection {'realizesBusinessObjectRepresentation'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToLocationRepresentation'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfRepresentationRepresentation'});
				     
				if( (Collection {'Representation'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesRepresentationRepresentation','aggregatesRepresentationRepresentation','aggregatedByRepresentationRepresentation'}) ); }			
     
				if( (Collection {'Contract','BusinessObject'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'realizesBusinessObjectRepresentation'}) ); }			
     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToLocationRepresentation'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesRepresentationRepresentation_SinceElement_Representation{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Representation') and	(self.name == 'composesRepresentationRepresentation')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesRepresentationRepresentation' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByRepresentationRepresentation_SinceElement_Representation{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Representation') and	(self.name == 'aggregatedByRepresentationRepresentation')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByRepresentationRepresentation' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_realizesBusinessObjectRepresentation_SinceElement_Representation{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Representation') and	(self.name == 'realizesBusinessObjectRepresentation')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'realizesBusinessObjectRepresentation' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
   
      
	critique hasRightCrossRelationNameSinceElement_SystemSoftware{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'SystemSoftware')
	   	check{  
	   		if( (Collection {'composesNodeNode','aggregatesNodeNode','aggregatedByNodeNode','associatedWithCommunicationPathNode','assignedToArtifactNode','usesInfrastructureInterfaceNode','usesInfrastructureServiceNode','assignedFromLocationNode','composesSystemSoftwareSystemSoftware','aggregatesSystemSoftwareSystemSoftware','aggregatedBySystemSoftwareSystemSoftware','assignedToDeviceSystemSoftware'}).includes(self.name) ){
	   		    			
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){
					if( (Collection {'composesNodeNode','aggregatesNodeNode','aggregatedByNodeNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'CommunicationPath'}).includes(self.target.typeName) ){
					if( (Collection {'associatedWithCommunicationPathNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToArtifactNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){
					if( (Collection {'usesInfrastructureInterfaceNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){
					if( (Collection {'usesInfrastructureServiceNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Location'}).includes(self.target.typeName) ){
					if( (Collection {'assignedFromLocationNode'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'SystemSoftware'}).includes(self.target.typeName) ){
					if( (Collection {'composesSystemSoftwareSystemSoftware','aggregatesSystemSoftwareSystemSoftware','aggregatedBySystemSoftwareSystemSoftware'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Device'}).includes(self.target.typeName) ){
					if( (Collection {'assignedToDeviceSystemSoftware'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfNodeNode','composedOfInfrastructureInterfaceNode','composedOfSystemSoftwareSystemSoftware'});
				     
				if( (Collection {'Device','SystemSoftware','Node'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesNodeNode','aggregatesNodeNode','aggregatedByNodeNode'}) ); }			
     
				if( (Collection {'CommunicationPath'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'associatedWithCommunicationPathNode'}) ); }			
     
				if( (Collection {'Artifact'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToArtifactNode'}) ); }			
     
				if( (Collection {'InfrastructureInterface'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesInfrastructureInterfaceNode'}) ); }			
     
				if( (Collection {'InfrastructureService'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'usesInfrastructureServiceNode'}) ); }			
     
				if( (Collection {'Location'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedFromLocationNode'}) ); }			
     
				if( (Collection {'SystemSoftware'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesSystemSoftwareSystemSoftware','aggregatesSystemSoftwareSystemSoftware','aggregatedBySystemSoftwareSystemSoftware'}) ); }			
     
				if( (Collection {'Device'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'assignedToDeviceSystemSoftware'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesNodeNode_SinceElement_SystemSoftware{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_SystemSoftware') and	(self.name == 'composesNodeNode')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesNodeNode' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByNodeNode_SinceElement_SystemSoftware{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_SystemSoftware') and	(self.name == 'aggregatedByNodeNode')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByNodeNode' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_associatedWithCommunicationPathNode_SinceElement_SystemSoftware{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_SystemSoftware') and	(self.name == 'associatedWithCommunicationPathNode')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'associatedWithCommunicationPathNode' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
             
	critique hasTargetInstancesToCrossRelation_assignedFromLocationNode_SinceElement_SystemSoftware{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_SystemSoftware') and	(self.name == 'assignedFromLocationNode')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'assignedFromLocationNode' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_composesSystemSoftwareSystemSoftware_SinceElement_SystemSoftware{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_SystemSoftware') and	(self.name == 'composesSystemSoftwareSystemSoftware')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesSystemSoftwareSystemSoftware' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedBySystemSoftwareSystemSoftware_SinceElement_SystemSoftware{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_SystemSoftware') and	(self.name == 'aggregatedBySystemSoftwareSystemSoftware')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedBySystemSoftwareSystemSoftware' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
   
      
	critique hasRightCrossRelationNameSinceElement_Value{
 		guard :  self.target.satisfies('hasRightElementName') and self.source.satisfies('hasRightElementName') and (self.source.typeName == 'Value')
	   	check{  
	   		if( (Collection {'composesValueValue','aggregatesValueValue','aggregatedByValueValue','associatedWithProductValue'}).includes(self.name) ){
	   		    			
				if( (Collection {'Value'}).includes(self.target.typeName) ){
					if( (Collection {'composesValueValue','aggregatesValueValue','aggregatedByValueValue'}).includes(self.name)  ){ return true;}
				}				
    			
				if( (Collection {'Product'}).includes(self.target.typeName) ){
					if( (Collection {'associatedWithProductValue'}).includes(self.name)  ){ return true;}
				}				

				return false;
	   		 
			}else{ return false; }
		}	   	
	   	message: 'The instance (Cross EReference) \'' + self.name + '\' is not valid since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\''
	   	
		fix {	
			title: 'Select a valid name ...'
		  	do {	
			  	var rulesValidationHelper = new Native('co.edu.uniandes.iArchimate.validation.OntologicalRulesValidationHelper');			  	
			  	var newName;
			  	var namesGroup = (Collection {});
			  	var namesERefencences_Cont = (Collection {'composedOfValueValue'});
				     
				if( (Collection {'Value'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'composesValueValue','aggregatesValueValue','aggregatedByValueValue'}) ); }			
     
				if( (Collection {'Product'}).includes(self.target.typeName) ){ namesGroup.addAll( (Collection {'associatedWithProductValue'}) ); }			

		   		newName := rulesValidationHelper.changeInstanceCrossEReferenceName(namesGroup, namesERefencences_Cont, self.name,  self.source.typeName );
		   		if(newName <> null) self.name := newName;
		   		rulesValidationHelper.reValidate(); 
		   	}	   	
		}
	}	
	    
	critique hasTargetInstancesToCrossRelation_composesValueValue_SinceElement_Value{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Value') and	(self.name == 'composesValueValue')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'composesValueValue' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
       
	critique hasTargetInstancesToCrossRelation_aggregatedByValueValue_SinceElement_Value{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Value') and	(self.name == 'aggregatedByValueValue')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'aggregatedByValueValue' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	
    
	critique hasTargetInstancesToCrossRelation_associatedWithProductValue_SinceElement_Value{
 		guard :  self.satisfies('hasRightCrossRelationNameSinceElement_Value') and	(self.name == 'associatedWithProductValue')
	   	check{ 
	   	 	var instances =  CrossRelation.allInstances.select (e | e.name == 'associatedWithProductValue' and e.type().name == 'CrossRelation').select( e | e.source == self.source);
	   	 	if(instances.size() >= 0  and instances.size() <= 1  ){ return true; }else{ return false;	}
		}	   	
		message : 'The instance (Cross EReference) \'' + self.name + '\' since \'' +  self.source.typeName + '\' towards \'' + self.target.typeName + '\' must has a cardinality between 0 and 1. Current: ' + instances.size()

	}	


	
}
	
           