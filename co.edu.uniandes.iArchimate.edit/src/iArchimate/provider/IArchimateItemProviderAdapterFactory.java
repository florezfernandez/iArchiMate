/**
 */
package iArchimate.provider;

import iArchimate.util.IArchimateAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IArchimateItemProviderAdapterFactory extends IArchimateAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IArchimateItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.Model} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelItemProvider modelItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.Model}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createModelAdapter()
  {
    if (modelItemProvider == null)
    {
      modelItemProvider = new ModelItemProvider(this);
    }

    return modelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.Group} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GroupItemProvider groupItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.Group}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGroupAdapter()
  {
    if (groupItemProvider == null)
    {
      groupItemProvider = new GroupItemProvider(this);
    }

    return groupItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.Element} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ElementItemProvider elementItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.Element}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createElementAdapter()
  {
    if (elementItemProvider == null)
    {
      elementItemProvider = new ElementItemProvider(this);
    }

    return elementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.AbsentElement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AbsentElementItemProvider absentElementItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.AbsentElement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAbsentElementAdapter()
  {
    if (absentElementItemProvider == null)
    {
      absentElementItemProvider = new AbsentElementItemProvider(this);
    }

    return absentElementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.Attribute} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AttributeItemProvider attributeItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.Attribute}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAttributeAdapter()
  {
    if (attributeItemProvider == null)
    {
      attributeItemProvider = new AttributeItemProvider(this);
    }

    return attributeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.ImperfectAttribute} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImperfectAttributeItemProvider imperfectAttributeItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.ImperfectAttribute}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createImperfectAttributeAdapter()
  {
    if (imperfectAttributeItemProvider == null)
    {
      imperfectAttributeItemProvider = new ImperfectAttributeItemProvider(this);
    }

    return imperfectAttributeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.Relation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationItemProvider relationItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.Relation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRelationAdapter()
  {
    if (relationItemProvider == null)
    {
      relationItemProvider = new RelationItemProvider(this);
    }

    return relationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.ImperfectRelation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImperfectRelationItemProvider imperfectRelationItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.ImperfectRelation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createImperfectRelationAdapter()
  {
    if (imperfectRelationItemProvider == null)
    {
      imperfectRelationItemProvider = new ImperfectRelationItemProvider(this);
    }

    return imperfectRelationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.DecisionTrace} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DecisionTraceItemProvider decisionTraceItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.DecisionTrace}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDecisionTraceAdapter()
  {
    if (decisionTraceItemProvider == null)
    {
      decisionTraceItemProvider = new DecisionTraceItemProvider(this);
    }

    return decisionTraceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.DirectObservation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DirectObservationItemProvider directObservationItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.DirectObservation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDirectObservationAdapter()
  {
    if (directObservationItemProvider == null)
    {
      directObservationItemProvider = new DirectObservationItemProvider(this);
    }

    return directObservationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.Meeting} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MeetingItemProvider meetingItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.Meeting}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMeetingAdapter()
  {
    if (meetingItemProvider == null)
    {
      meetingItemProvider = new MeetingItemProvider(this);
    }

    return meetingItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.Document} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DocumentItemProvider documentItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.Document}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDocumentAdapter()
  {
    if (documentItemProvider == null)
    {
      documentItemProvider = new DocumentItemProvider(this);
    }

    return documentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.Person} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PersonItemProvider personItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.Person}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPersonAdapter()
  {
    if (personItemProvider == null)
    {
      personItemProvider = new PersonItemProvider(this);
    }

    return personItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.Observation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ObservationItemProvider observationItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.Observation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createObservationAdapter()
  {
    if (observationItemProvider == null)
    {
      observationItemProvider = new ObservationItemProvider(this);
    }

    return observationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.Fact} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FactItemProvider factItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.Fact}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFactAdapter()
  {
    if (factItemProvider == null)
    {
      factItemProvider = new FactItemProvider(this);
    }

    return factItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.InstanceFact} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InstanceFactItemProvider instanceFactItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.InstanceFact}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createInstanceFactAdapter()
  {
    if (instanceFactItemProvider == null)
    {
      instanceFactItemProvider = new InstanceFactItemProvider(this);
    }

    return instanceFactItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.AttributeFact} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AttributeFactItemProvider attributeFactItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.AttributeFact}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAttributeFactAdapter()
  {
    if (attributeFactItemProvider == null)
    {
      attributeFactItemProvider = new AttributeFactItemProvider(this);
    }

    return attributeFactItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.RelationFact} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationFactItemProvider relationFactItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.RelationFact}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRelationFactAdapter()
  {
    if (relationFactItemProvider == null)
    {
      relationFactItemProvider = new RelationFactItemProvider(this);
    }

    return relationFactItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link iArchimate.Decision} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DecisionItemProvider decisionItemProvider;

  /**
   * This creates an adapter for a {@link iArchimate.Decision}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDecisionAdapter()
  {
    if (decisionItemProvider == null)
    {
      decisionItemProvider = new DecisionItemProvider(this);
    }

    return decisionItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (modelItemProvider != null) modelItemProvider.dispose();
    if (groupItemProvider != null) groupItemProvider.dispose();
    if (elementItemProvider != null) elementItemProvider.dispose();
    if (absentElementItemProvider != null) absentElementItemProvider.dispose();
    if (attributeItemProvider != null) attributeItemProvider.dispose();
    if (imperfectAttributeItemProvider != null) imperfectAttributeItemProvider.dispose();
    if (relationItemProvider != null) relationItemProvider.dispose();
    if (imperfectRelationItemProvider != null) imperfectRelationItemProvider.dispose();
    if (decisionTraceItemProvider != null) decisionTraceItemProvider.dispose();
    if (directObservationItemProvider != null) directObservationItemProvider.dispose();
    if (meetingItemProvider != null) meetingItemProvider.dispose();
    if (documentItemProvider != null) documentItemProvider.dispose();
    if (personItemProvider != null) personItemProvider.dispose();
    if (observationItemProvider != null) observationItemProvider.dispose();
    if (factItemProvider != null) factItemProvider.dispose();
    if (instanceFactItemProvider != null) instanceFactItemProvider.dispose();
    if (attributeFactItemProvider != null) attributeFactItemProvider.dispose();
    if (relationFactItemProvider != null) relationFactItemProvider.dispose();
    if (decisionItemProvider != null) decisionItemProvider.dispose();
  }

}
